<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UESTC-MSC</title>
  
  <subtitle>欢迎来到电子科大微软学生俱乐部</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uestc-msc.github.io/"/>
  <updated>2019-09-23T21:46:48.842Z</updated>
  <id>https://uestc-msc.github.io/</id>
  
  <author>
    <name>UESTC-MSC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown安利&amp;Typora简要使用教程</title>
    <link href="https://uestc-msc.github.io/2019/09/23/Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://uestc-msc.github.io/2019/09/23/Markdown安利-Typora简要使用教程/</id>
    <published>2019-09-23T06:45:31.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>在此我来安利一下<strong>Markdown</strong>和<strong>Typora</strong>.</p><a id="more"></a><h2 id="Markdown安利"><a href="#Markdown安利" class="headerlink" title="Markdown安利"></a>Markdown安利</h2><h3 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown"></a>什么是Markdown</h3><p>Markdown是一门语言, 一门我正用来写这篇博客所用的语言, 一门轻量级的<strong>标记语言</strong> (Markup Language). 有没有觉得这个词很眼熟? 是的, HTML全称<strong>HyperText Markup Language</strong>. Markdown和HTML同属于MarkupLanguage(Markdown是一门Markup Language是Markdown作者的恶趣味), 它们与C, Python等编程语言并不是一类东西. <strong>Markup</strong>这个词源自<strong>印刷业</strong>, 指的是在电子排版技术出现之前人们对印刷物内容的排版进行标记的方式. 比如一段文字应当是<strong>粗体</strong>, <em>斜体</em>,<u>有下划线</u>还是<del>有删除线</del>, 使用什么字体, 字体大小, 左页边距应当是多少, 一张图片该放在哪里, 多大等等…</p><p>💡 也就是说以前的人们在将原稿最终印刷出来前想知道会印成什么样基本靠脑补, 而现在我们称这个由标记语言文件得到最终效果的过程为<strong>渲染</strong> (render).</p><p>而之所以我们说Markdown是一门<strong>轻量级</strong>的标记语言是因为在Markdown的语法比HTML等标记语言要简洁太多😆</p><ul><li>一</li><li>二</li></ul><p>比如👆 上面这个列表的Markdown实现代码为</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>一</span><br><span class="line"><span class="bullet">- </span>二</span><br></pre></td></tr></tbody></table></figure><p>而HTML实现代码为</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>但Markdown有时候也会让人觉得太过轻量级以至于缺少一些语法, 比如这个<u>下划线</u>其实是用HTML标签实现的. 好在你也可以在Markdown文件中写HTML, 如今的Markdown渲染工具基本都支持这个功能.</p><p>也是由于上面这个原因, 在Markdown作者们推出的<a href="https://commonmark.org/" target="_blank" rel="noopener"><strong>CommonMark</strong></a>的基础上有了添加了更多语法的各种Markdown超集, 比如GitHub发布的<a href="https://github.github.com/gfm/" target="_blank" rel="noopener"><strong>GitHub FlavoredMarkdown</strong></a>.</p><h3 id="Markdown应用广泛吗"><a href="#Markdown应用广泛吗" class="headerlink" title="Markdown应用广泛吗"></a>Markdown应用广泛吗</h3><p>实际上如今Markdown的使用相当广泛, 只要是支持所谓<strong>富文本</strong>的社区/论坛等, 比如说<strong>GitHub</strong>, <strong>知乎</strong>, <strong>Stack OverFlow</strong>, <strong>CSDN博客</strong>, <strong>Wikipedia</strong>都是使用的Markdown. 另外因为Markdown和HTML的转换十分容易, 目前大多个人博客都是编辑Markdown格式的文章再生成HTML页面, 比如我正在码的也是Markdown文件.</p><p>再有就是目前大多数项目根目录的<strong>README</strong>文档都是Markdown格式, 而在线查看项目代码时GitHub等代码托管网站都会自动将项目中所有Markdown文件渲染出来.</p><h3 id="为什么我们使用Markdown"><a href="#为什么我们使用Markdown" class="headerlink" title="为什么我们使用Markdown"></a>为什么我们使用Markdown</h3><p>以下是网上的一些总结和我个人的体会.</p><ol><li>Markdown的设计理念是易读易写, 因此<strong>即便不渲染Markdown文件的可读性也很高</strong>,这让没有Markdown渲染工具的人也能很好地阅读, 而如果要脑力渲染HTML, 一会就眼晕了.</li><li>这种格式能让文档很方便的排列为很简洁好看的排版, <strong>能让人专注于书写内容</strong>, 不必费神排版</li><li>支持代码按语言的语法高亮</li><li><strong>能很方便的进行版本管理</strong>. 在要进行版本管理的项目中的Word文件简直是毒瘤, 不操作一番的话版本管理工具比如git并不能识别word文件具体变化, 而使用纯文本的Markdown能让每次的更改被体现出来!</li><li><strong>占用空间小</strong> (可以想一想一个word文档的大小)</li><li><strong>能很容易地转为多种格式</strong>. Markdown和HTML是兄弟关系,因此Markdown文件能轻松转换成<strong>HTML</strong>文件格式以及HTML文件能轻易转换为的格式(<strong>PDF</strong>, <strong>jpg</strong>, <strong>Epub</strong>等)是显而易见的. 通过一些额外工具(比如<a href="https://pandoc.org/" target="_blank" rel="noopener">Pandoc</a>)的帮助,Markdown文件还能一键转化为更多文件格式,比如<strong>LaTeX</strong>, <strong>Word</strong>,<strong>OpenOffice</strong>, <strong>Media Wiki</strong>等.</li><li>能方便的插入图片, 表格, 超链接等</li><li>兼容HTML语法, 因此我们想让页面显示成什么样就可以显示成什么样</li><li>可以兼容LaTeX语法, 可以很方便的显示复杂公式</li><li>还可以兼容<strong>Graphviz</strong>, <strong>Mermaid</strong>等流程图工具等等…</li></ol><h3 id="Markdown简明语法"><a href="#Markdown简明语法" class="headerlink" title="Markdown简明语法"></a>Markdown简明语法</h3><ul><li><p>一个标题以几个<code>#</code>开头, 空格后是文字. 以#的个数来表示第几级标题</p></li><li><p>以 - 开头接一个空格开始一个子弹列表, 以 1. 接空格开始一个有序列表</p></li><li><p>在要加粗的词两侧加 ** 来加粗. 如果要打出 ** 等特殊字符要在星号前加 \ 来转义 </p></li><li><p>在<strong>行内代码</strong>两侧加 ` .  注意这不是单引号, 在我键盘上在<kbd>Esc</kbd> 键下面. 当然这个不只是用来放行内代码的, 也可以放别的.</p></li><li><p>在代码块上下行加 ``` , 第一个```后写代码的语言.</p></li><li><p>在Typora这个软件里插入图片很容易, 直接<code>Ctrl V</code>粘贴就好了, 或者右键, 里面有插入图片的按键. 插入图片的markdown语法是</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">当图片失效时此处显示的文字</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>插入超链接的语法和插入图片的语法很像, 此处举例说明. 这是点击进入百度的链接👉 <a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com)</span><br></pre></td></tr></tbody></table></figure></li><li><p>表格用<code>|</code>分隔每个元素, 第一行是各列的名字, 第二行的 <code>|</code>间是<code>-</code>, 分隔列名和值. 以下是一个例子</p></li></ul><table><thead><tr><th>第一列</th><th>第二列</th><th>第三列</th></tr></thead><tbody><tr><td>a</td><td>b</td><td>c</td></tr></tbody></table><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 第一列 | 第二列 | 第三列 |</span><br><span class="line">|-|-|-|</span><br><span class="line">| a | b | c |</span><br></pre></td></tr></tbody></table></figure><ul><li>更详细的语法说明在Typora内可以查看Typora自带的Markdown语法参考手册</li></ul><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1569274096465.png" alt="1569274096465"></p><h2 id="Typora安利"><a href="#Typora安利" class="headerlink" title="Typora安利"></a>Typora安利</h2><p>那么用什么软件来写Markdown呢? 认准<a href="https://typora.io/#download" target="_blank" rel="noopener"><strong>Typora</strong></a>!</p><p>Typora的优点多到我不想写 (不其实是单纯不想写了), 最突出的优点我觉得是它的<strong>颜值</strong>,以及<strong>能直接将图片粘贴到文件中</strong>.</p><h3 id="Typora快速入门"><a href="#Typora快速入门" class="headerlink" title="Typora快速入门"></a>Typora快速入门</h3><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>在<strong>Themes</strong>一栏可以切换软件的主题</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1569271897771.png" alt="1569271897771"></p><h4 id="大纲视图"><a href="#大纲视图" class="headerlink" title="大纲视图"></a>大纲视图</h4><p>可以按这个<strong>OutLine</strong>或者按左下角的小圆圈触发大纲视图, 点击大纲视图里的标题可以快速跳转.</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1569272130639.png" alt="1569272130639"></p><h4 id="源代码视图"><a href="#源代码视图" class="headerlink" title="源代码视图"></a>源代码视图</h4><p>按左下角这个<kbd></kbd>可以切换到源代码视图</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1569272534032.png" alt="1569272534032"></p><h4 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h4><p>右下角这里可以选择进行拼写检查的语言或者关闭这个功能.</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1569272445049.png" alt="1569272445049"></p><h4 id="更多设置"><a href="#更多设置" class="headerlink" title="更多设置"></a>更多设置</h4><p>按这个<strong>Preference</strong>可以进行更多偏好设置.</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1569272312746.png" alt="1569272312746"></p><p>以下是我的推荐设置</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720190924051240.png" alt=""></p><p>勾选<strong>对网路图片应用上述规则</strong>那直接粘贴从浏览器复制的图片时Typora会自动将该图片下载到这个指定文件夹. 建议开启插入时自动转义, 虽然这样会让中文 文件夹名变为乱码, 但这样无论文件夹名/文件名有多骚都不会出问题.</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720190924051232.png" alt=""></p><p>忽略单个换行让Typora遵循GFM: 单个换行不渲染为换行, 两个换行才渲染为换行</p><p><img src="Markdown%E5%AE%89%E5%88%A9-Typora%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720190924051204.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在此我来安利一下&lt;strong&gt;Markdown&lt;/strong&gt;和&lt;strong&gt;Typora&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="科普" scheme="https://uestc-msc.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="LeoJhonSong" scheme="https://uestc-msc.github.io/tags/LeoJhonSong/"/>
    
  </entry>
  
  <entry>
    <title>给电子科大新生们的软件推荐列表</title>
    <link href="https://uestc-msc.github.io/2019/09/03/%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/"/>
    <id>https://uestc-msc.github.io/2019/09/03/给电子科大新生们的软件推荐列表/</id>
    <published>2019-09-03T12:19:02.000Z</published>
    <updated>2019-09-23T21:46:48.854Z</updated>
    
    <content type="html"><![CDATA[<p>也许很多同学经常苦恼于找不到免费, 好用, 美观, 干净的软件. 这里为大家推荐一些十分好用的Windows平台电脑软件及部分安装教程链接. (破解软件的也帮你们找好了哦)</p><p>🌟🌟🌟 <a href="#一键跳转Sci-Hub">这里</a>, <a href="#Office全家桶">这里</a>和<a href="#MATLAB">这里</a>有学校给大家提供的福利的说明 😏</p><a id="more"></a><ol><li><a href="#必备">必备</a><ol><li><a href="#全局文件搜索工具">全局文件搜索工具</a></li><li><a href="#电脑管家">电脑管家</a></li><li><a href="#截图贴图工具">截图/贴图工具</a></li><li><a href="#压缩解压缩工具">压缩/解压缩工具</a></li><li><a href="#百度网盘破解版">百度网盘破解版</a></li><li><a href="#视频播放器">视频播放器</a></li><li><a href="#音乐播放器">音乐播放器</a></li></ol></li><li><a href="#Chrome插件">Chrome插件</a><ol><li><a href="#必备-1">必备</a><ol><li><a href="#查词工具">查词工具</a></li><li><a href="#网页截长图工具">网页截长图工具</a></li><li><a href="#稍后阅读">稍后阅读</a></li></ol></li><li><a href="#GitHub">GitHub</a><ol><li><a href="#下载仓库指定文件文件夹">下载仓库指定文件/文件夹</a></li><li><a href="#侧边栏显示仓库文件树">侧边栏显示仓库文件树</a></li><li><a href="#3D-GitHub提交热力图">3D GitHub提交热力图</a></li></ol></li><li><a href="#学术">学术</a><ol><li><a href="#谷歌学术搜索">谷歌学术搜索</a></li><li><a href="#一键跳转Sci-Hub">一键跳转Sci-Hub</a></li></ol></li></ol></li><li><a href="#办公">办公</a><ol><li><a href="#Office全家桶">Office全家桶</a></li><li><a href="#PDF阅读器">PDF阅读器</a></li></ol></li><li><a href="#写作">写作</a><ol><li><a href="#文本编辑器">文本编辑器</a></li><li><a href="#Markdown">Markdown</a></li><li><a href="#PDF">PDF</a></li></ol></li><li><a href="#Adobe全家桶">Adobe全家桶</a></li><li><a href="#CAD">CAD</a></li><li><a href="#MATLAB">MATLAB</a></li><li><a href="#系统安装维修工具">系统安装/维修工具</a><ol><li><a href="#系统启动盘烧录工具">系统启动盘烧录工具</a></li><li><a href="#PE盘">PE盘</a></li><li><a href="#数据恢复">数据恢复</a></li></ol></li></ol><h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><h3 id="全局文件搜索工具"><a href="#全局文件搜索工具" class="headerlink" title="全局文件搜索工具"></a>全局文件搜索工具</h3><p>只要你曾试过在Windows资源管理器中搜索文件你就会知道只要搜索范围稍微大一些这个搜索过程是多么长…</p><p>🔗 <a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener"><strong>Everything</strong></a> 这款搜索工具让搜索变得十分迅速! 它甚至支持正则搜索等更高级的功能.</p><p>💡 Everything安装起来也很容易, 下载上面链接中的<strong>安装版64位</strong>, 安装引导中除了安装位置都维持默认选项即可.</p><h3 id="电脑管家"><a href="#电脑管家" class="headerlink" title="电脑管家"></a>电脑管家</h3><p>国内一提电脑管家那就是<strong>360</strong>, <strong>鲁大师</strong>等一众流氓软件, 事实上他们给我们带来的困扰比便利更多, 不仅弹出各种迷之弹窗, 大多数还会捆绑下载一大堆奇奇怪怪的软件… 但清理垃圾, 管理开机启动程序等功能确实是需要的.</p><p>我推荐🔗 <a href="https://www.ccleaner.com/ccleaner/download" target="_blank" rel="noopener"><strong>CCleaner</strong></a> 页面往下拉, 点击绿色的<strong>Download</strong>按钮即可下载免费版.</p><p><img src="https://img.creativemark.co.uk/uploads/images/538/17538/img3File.png" alt="âccleanerâçå¾çæç´¢ç»æ"></p><p>💡 安装后可以在设置中将语言调为<code>中文</code>. 另外默认情况下CCleaner总是会弹出提示可以更新的弹窗, 但这个检查更新的功能可以<a href="https://www.cnblogs.com/chucklu/p/10404615.html" target="_blank" rel="noopener">像这样关闭</a></p><h3 id="截图-贴图工具"><a href="#截图-贴图工具" class="headerlink" title="截图/贴图工具"></a>截图/贴图工具</h3><p>我们都知道Windows自带的截图工具是很不好用的, 只能进行最简单的截图.</p><p>这里推荐🔗<a href="https://www.microsoft.com/zh-cn/p/snipaste/9p1wxpkb68kx?activetab=pivot:overviewtab" target="_blank" rel="noopener"><strong>snipaste</strong></a>.snipaste不仅能截图, 还能简单的P一下截下来的图: 画线, 画框, 画箭头, 打码, 查看像素点颜色值…</p><p>而我觉得snipaste最惊艳的功能是他还能<strong>贴图</strong>, 也就是能把刚截的图直接显示出来, 可以挪动, 调整大小, 调整透明度. 比如当我们想对照着看课文里两个相隔很多页的段落时, 我们可以把其中一段截图并贴出来.</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/apps.52183.14503356220976813.c71d2a10-0aa3-486c-9563-2c363aaaab5e.jpeg" alt="img"></p><h3 id="压缩-解压缩工具"><a href="#压缩-解压缩工具" class="headerlink" title="压缩/解压缩工具"></a>压缩/解压缩工具</h3><p>而压缩/解压缩工具最棒的无疑是🔗 <a href="https://www.bandisoft.com/bandizip/" target="_blank" rel="noopener"><strong>Bandizip</strong></a></p><p>Bandizip支持的格式很多, 不必担心遇到无法解压的格式. 另外它的界面也很漂亮😄</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/bandizip.png" alt="âbandizipâçå¾çæç´¢ç»æ"></p><h3 id="百度网盘破解版"><a href="#百度网盘破解版" class="headerlink" title="百度网盘破解版"></a>百度网盘破解版</h3><p>国内分享大文件通常使用百度网盘, 但这东西如果不充超级会员会极大的限制下载速度 (不过在校园有些地方能达到2, 3Mb/s), 下载文件数量也有限制. 网上有好几个破解版百度网盘, 也有脚本能突破百度网盘下载速度限制, 但用来用去我还是觉得🔗 <a href="https://pandownload.com/" target="_blank" rel="noopener">PanDownload</a> 体验最佳.</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/login_1.png" alt="img"></p><p>💡 PanDownload不需要安装, 点击<strong>本地下载</strong>后将压缩包解压就可以点击其中的<strong>exe</strong>文件使用了. 另外PanDownload也有在线版</p><h3 id="视频播放器"><a href="#视频播放器" class="headerlink" title="视频播放器"></a>视频播放器</h3><p>虽然爱奇艺, 迅雷影音, 优酷等软件也能看外部导入的视频, 但如果我们想要一款单纯没有繁杂的视频推荐, 广告, 但又功能强大的视频播放器,<a href="https://potplayer.daum.net/" target="_blank" rel="noopener"><strong>PotPlayer</strong></a>当属最值得推荐的播放器.</p><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8">💡</span> PotPlayer的官网被墙了, 无法翻墙的同学们可以从<a href="https://daumpotplayer.com/download/" target="_blank" rel="noopener">这里</a>下载</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/1532514381_potplayer.jpg" alt="âpotplayerâçå¾çæç´¢ç»æ"></p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><p>和视频播放器的情况相同, 我们同样需要一个干净, 功能强大的<strong>无损</strong>音乐播放器, 那就是🔗<a href="https://www.foobar2000.org/download" target="_blank" rel="noopener"><strong>foobar2000</strong></a> foobar支持的音频格式众多, 解析度较好. 如果你觉得foobar界面有点简朴, 还可以更换皮肤</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/1527010038_foobar2000.jpg" alt="âfoobar2000âçå¾çæç´¢ç»æ"></p><p>💡 foobar不默认支持的ape格式可以通过<a href="https://www.jianshu.com/p/a25aa0f1a063" target="_blank" rel="noopener">安装插件</a>来支持.</p><h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><h3 id="必备-1"><a href="#必备-1" class="headerlink" title="必备"></a>必备</h3><h4 id="查词工具"><a href="#查词工具" class="headerlink" title="查词工具"></a>查词工具</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed-1567618640695.png?10" alt="img"></p><p>🔗 <a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg?hl=en" target="_blank" rel="noopener"><strong>沙拉查词</strong></a>是一款查词十分迅速便利, 弹出界面十分养眼, 可选功能很多的查词工具, 是chrome查词插件中毫无疑问最好的!</p><h4 id="网页截长图工具"><a href="#网页截长图工具" class="headerlink" title="网页截长图工具"></a>网页截长图工具</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed-1567620991957.png?10" alt="img"></p><p>如果只是为了截普通的图有了snipaste的我们没必要再给浏览器单独装一个插件, 但🔗<a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg" target="_blank" rel="noopener"><strong>FireShot</strong></a>的惊艳之处在于它可以<strong>截长图</strong>. FireShot能将整个网页转为图片,, 也能截指定区域的长图.</p><h4 id="稍后阅读"><a href="#稍后阅读" class="headerlink" title="稍后阅读"></a>稍后阅读</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed-1567618023676.png?10" alt="img"></p><p>虽然我现在用的是chrome, 但我很喜欢edge的<strong>稍后阅读</strong>功能, 能把当前所有网页都关闭并放到稍后阅读的列表里. 一方面如果网页开多了<strong>浏览器十分吃内存</strong>, 一方面能将一部分目前暂时不看但还有用的网页收纳起来, 让网页变少一些, 心情也会好不少😆</p><p>可惜的是chrome并没有内置这个功能. 不过通过🔗<a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="noopener"><strong>OneTab</strong></a>这个插件倒是实现了稍后阅读的功能👍</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><h4 id="下载仓库指定文件-文件夹"><a href="#下载仓库指定文件-文件夹" class="headerlink" title="下载仓库指定文件/文件夹"></a>下载仓库指定文件/文件夹</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed-1567621794207.png?10" alt="img"></p><p>很多时候我们只想下载一个仓库中一部分文件而不是整个仓库, 但GitHub本身并没有提供这种功能. 如果<a href="https://zhgcao.github.io/2016/05/11/git-sparse-checkout/" target="_blank" rel="noopener">用git命令</a>未免有点麻烦.🔗<a href="https://zhgcao.github.io/2016/05/11/git-sparse-checkout/" target="_blank" rel="noopener">GitZip</a>允许我们<strong>一键下载</strong>一个文件夹为压缩包, 可以说是很便利了😃</p><h4 id="侧边栏显示仓库文件树"><a href="#侧边栏显示仓库文件树" class="headerlink" title="侧边栏显示仓库文件树"></a>侧边栏显示仓库文件树</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed-1567622482155.png?10" alt="img"></p><p>在GitHub上想找一个文件只能一层一层文件夹点进去是一件令人十分苦恼的事, 而🔗<a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener"><strong>Octotree</strong></a>能让我们<strong>像使用IDE一样</strong>在侧边栏看到文件树, 甚至是带图标的!</p><h4 id="3D-GitHub提交热力图"><a href="#3D-GitHub提交热力图" class="headerlink" title="3D GitHub提交热力图"></a>3D GitHub提交热力图</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed-1567622962381.png?10" alt="img"></p><p>🔗 <a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien" target="_blank" rel="noopener"><strong>IsometricContributions</strong></a>纯碎是一个美化GitHub个人主页的贡献热力图的插件. 它会将<strong>Github Contributions Graph</strong>呈现为<strong>3D的柱状图</strong>. 非常炫酷😎</p><h3 id="学术"><a href="#学术" class="headerlink" title="学术"></a>学术</h3><h4 id="谷歌学术搜索"><a href="#谷歌学术搜索" class="headerlink" title="谷歌学术搜索"></a>谷歌学术搜索</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed.png?10" alt="img"></p><p>使用这个🔗 <a href="https://chrome.google.com/webstore/detail/google-scholar-button/ldipcbpaocekfooobnbcddclnhejkcpn" target="_blank" rel="noopener"><strong>Google学术搜索按钮</strong></a>可以十分便利的搜索有关学术的内容.</p><h4 id="一键跳转Sci-Hub"><a href="#一键跳转Sci-Hub" class="headerlink" title="一键跳转Sci-Hub"></a>一键跳转Sci-Hub</h4><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/unnamed-1567618045938.png?10" alt="img"></p><p><strong>Sci-Hub</strong>是一个emmm你们以后会知道的神仙网站, 🔗 <a href="https://chrome.google.com/webstore/detail/auto-sci-hub/nlogbpfgpkffmombiknfdoogphkimmmd" target="_blank" rel="noopener"><strong>AutoSci-Hub</strong></a>实现了<strong>一键从论文网页跳转Sci-Hub</strong>功能</p><p>💡 不过Sci-Hub上只有SCI的文章, 如果想下<strong>知网</strong>等国内文献数据库的文章, <strong>只需连接校园网后再进入即可下载</strong>. 学校为大家购买了许多数据库 (具体哪些数据库大家可以到<a href="http://www.lib.uestc.edu.cn/" target="_blank" rel="noopener">学校图书馆官网</a>查看, 中外数据库都有), 可以免费下载各种文献👍</p><h2 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h2><h3 id="Office全家桶"><a href="#Office全家桶" class="headerlink" title="Office全家桶"></a>Office全家桶</h3><p>现在我来解说一下如何破解Office… 不,没这么麻烦, 电子科大为同学们提供了<a href="http://ms.uestc.edu.cn/" target="_blank" rel="noopener"><strong>免费的正版Office</strong></a>! (甚至格院同学们可以享受高贵的Office365套装🐮🍺)</p><p>💡 上面这个链接只能通过校园网或者寝室WiFi登录. Office的激活需要通过<a href="http://ms.uestc.edu.cn/help/client" target="_blank" rel="noopener">学校提供的这个软件</a>进行.</p><p>💡 顺带一提, 用学校邮箱 (<strong>学号@std.uestc.edu.cn</strong>)登录OneDirve (格院同学们也可以用<strong>格大学号@student.gla.ac.uk</strong>登录), 会惊喜的发现有<strong>2T</strong>的云空间!</p><h3 id="PDF阅读器"><a href="#PDF阅读器" class="headerlink" title="PDF阅读器"></a>PDF阅读器</h3><p>实际上只是想看PDF的话你只需要有<strong>Chrome</strong>或者<strong>Edge</strong>这两个浏览器之一就可以了.我个人觉得chrome不适合拿来看pdf, 因为它看pdf的界面不好看😁 而用Edge看pdf甚至体验很良好, 打开速度快, 还能点右上角的<strong>笔</strong>图标来用<strong>OneNote</strong>做笔记. 也有很多人用的是老牌pdf阅读器<strong>Adobe Acrobat</strong>. 虽然Acrobat历史悠久, 但它的界面设计得很现代,很值得称赞的是它打开pdf的速度. <strong>但是</strong>Adobe家的东西向来要钱, 想免费使用Acrobat那就得破解, 我觉得不如就用Edge了.</p><p>但是上述几款的问题在于他们并不能<strong>记忆阅读进度</strong>. 如果课件每次打开需要手动翻到讲到的地方我觉得还是挺麻烦的. 🔗 <a href="https://www.microsoft.com/zh-cn/p/drawboard-pdf/9wzdncrfhwqt?cid=msft_web_collection&amp;activetab=pivot:overviewtab" target="_blank" rel="noopener">DrawboardPDF</a>是我目前使用的pdf阅读器. 很不幸的是在我下载时还免费的这个软件现在要好几十了😁 不过这个软件能记忆阅读进度, 支持手写/触屏模式, 做笔记的方式甚至比OneNote还要丰富.如果你喜欢在pdf上手写笔记还是很推荐这款软件的.</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/apps.59328.9007199266247478.31cdc74a-125a-4592-9f2c-1a98c77c5899.jpeg" alt="img"></p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><p>🔗 <a href="https://www.zhihu.com/question/20650946/answer/15745831" target="_blank" rel="noopener"><strong>不建议使用Windows自带的记事本</strong></a></p><p>因为历史原因, Windows记事本会在文件最开头加一个<a href="https://www.zhihu.com/question/20167122/answer/14199022" target="_blank" rel="noopener">BOM</a>, 导致在某些情况下文本会被识别为乱码.</p><p>最受认可的记事本是🔗 <a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener"><strong>notepad++</strong></a>, 它没有上面说这个毛病, 还有许多很实用的功能, 比如他能装插件, 比如基本所有语言的语法高亮 (在notepad中以HTML格式复制代码直接粘贴到word可以连语法高亮一起粘贴过去! 当然VSCode等编辑器一样能做到)</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>要说写markdown那必然是🔗 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></p><p>这是一款<strong>所见即所得</strong>的跨平台Markdown编辑器. 极其美观, 能显示大纲, 能直接粘贴图片, 能迅速更换颜色主题,能显示数学公式, 能导出文件为HTML, PDF等. 总之写markdown认准typora!</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/DG3gAjJV0AE9AB7.png" alt="âtyporaâçå¾çæç´¢ç»æ"></p><p>💡 在typora的<strong>帮助</strong>一栏有<strong>markdown语法参考文档</strong>.</p><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p>是的pdf也是可以编辑的, 只不过大部分软件不支持.</p><p><a href="#pdf阅读器">前面</a>提到的<strong>Acrobat</strong>是可以编辑pdf的, 但我最推荐的方式是用<strong>Word</strong>打开编辑 (较老的版本不支持). 因为word学校免费提供了.</p><h2 id="Adobe全家桶"><a href="#Adobe全家桶" class="headerlink" title="Adobe全家桶"></a>Adobe全家桶</h2><p>以下是来自一个微信公众号的adobe全家桶安装和破解教程</p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650202334&amp;idx=3&amp;sn=cc0d3c27928e1a8baed4e03923bf8e62&amp;chksm=8ee14032b996c924b979271ccd83aef74f0635064a6b61b3bf2fe4d39fa99e6dbcb311437557&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Photoshop CC2019</a></p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650202696&amp;idx=1&amp;sn=e3469547c11f2dd49b75cad908f016e1&amp;chksm=8ee142a4b996cbb234cc7842dc918c39873f67f2f22bba6f3a8603d372d53a3740a519c1ff3b&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Illustrator CC2019</a></p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650202285&amp;idx=2&amp;sn=346961051fb4ae61a0f2fb90b850e197&amp;chksm=8ee14041b996c9578aa6ea14f6c9c06661e47c9aa9b3f67e53f1a1dd1ad634bb94a0f8b2893c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Premiere Pro CC2019</a></p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650200846&amp;idx=8&amp;sn=1d785d9c9d9e7615384cb38297db0832&amp;chksm=8ee17be2b996f2f4ce7473fc282bc83ca31002473abfe45e504d502007a2db3da1d45d911ed0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">After Effects CC2019</a></p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650200846&amp;idx=5&amp;sn=3722cbab9b221e5eb0f1f28116316153&amp;chksm=8ee17be2b996f2f42dd607b3a5a43ee24739c75dc188c16ea2d083301ba9813cd64860fb4f49&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Audition CC2019</a></p><h2 id="CAD"><a href="#CAD" class="headerlink" title="CAD"></a>CAD</h2><p><strong>AutoCAD</strong>和<strong>SolidWorks</strong>是大学生最常接触到的CAD (计算机辅助绘图) 软件, 其中AutoCAD更多是用于绘制2D图纸, 而3D设计最常用的就是SolidWorks了.</p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650202243&amp;idx=1&amp;sn=181f1c29138c058208005cafcf625791&amp;chksm=8ee1406fb996c97908fa15a2cb17ec6c9145892f94be0c3d375978fe25d78e2d8d1be06274e6&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">AutoCAD 2020</a></p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650199099&amp;idx=3&amp;sn=a5ba516295d46084000fdfe60b657e5f&amp;chksm=8ee174d7b996fdc1ede01ecab3ed5be6ac40beb613d0289b49943bf4ad706fecf096f888d808&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">SolidWorks 2016</a></p><p>💡 因为SolidWorks无法向上兼容 (低版本SW无法打开在高版本创作的工程), 考虑到用得最多的版本是<strong>2016</strong>, 此处也给出2016版的链接.</p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650202684&amp;idx=1&amp;sn=a0d19adb81f48d6e480f1a9ce4968af1&amp;chksm=8ee142d0b996cbc61b6bb49432fb29f29d00c4a6e6fe2a863d191e2e13cbe04100eccafba54e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">SolidWorks 2019</a></p><h2 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h2><p>好几个学院在高年级都会有用到MATLAB的课程, 但我自己是<a href="https://www.zhihu.com/question/37824202/answer/767114071" target="_blank" rel="noopener">不甚喜欢MATLAB的</a>. 从链接能看出MATLAB更多是工科生验证算法用的, 本身不算什么高明东西. (如果你有精力我推荐<strong>Python</strong>!)</p><p>不过MATLAB用鼠标点一点就能画出很直观的图, 工具集成度非常高这几点还是很不错的. 再怎么说学校说要用能有什么办法😁</p><p>👇 给<strong>非格院同学们</strong>的最新版MATLAB安装和破解教程</p><p>🔗 <a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650202359&amp;idx=1&amp;sn=c865e50929b0b845b78065fe6a4a523a&amp;chksm=8ee1401bb996c90d591e18edb0dbf1e531217e6ef22d7b4469f0cbd7912a12dd776c0ac68ec0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Matlab R2019a</a></p><p>而格院学子就很牛逼了, 有🔗 <a href="https://www.gla.ac.uk/myglasgow/it/software/statistics/#/matlab" target="_blank" rel="noopener">格大提供的免费正版MATLAB</a>用! 不过说实话格院学费在那摆着, 并不会让人有占便宜的感觉🤷‍</p><p>💡 MATLAB官网上说每个账号只能给一台设备激活MATLAB, 不过我看我激活了好几台一样都能用.</p><h2 id="系统安装-维修工具"><a href="#系统安装-维修工具" class="headerlink" title="系统安装/维修工具"></a>系统安装/维修工具</h2><h3 id="系统启动盘烧录工具"><a href="#系统启动盘烧录工具" class="headerlink" title="系统启动盘烧录工具"></a>系统启动盘烧录工具</h3><p>🔗 <a href="https://rufus.ie/" target="_blank" rel="noopener">Rufus</a>是功能最强大的系统启动盘烧录工具. 不管是<strong>Windows</strong>还是<strong>Ubuntu</strong>亦或是<strong>Arch</strong>, <strong>Raspbian</strong>… 通通都能烧录! 使用也十分简单, 通常只需选择要烧录到的移动储存设备和要烧录的镜像即可, 其他选项Rufus会自动识别该选什么.</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/rufus_en.png" alt="[rufus screenshot]"></p><p>💡 我在我的移动硬盘中收集了一些常用的镜像, 并放了一个便携版Rufus安装包在这个文件夹, 这样要烧录系统启动盘时我只需同时插上我的移动硬盘和要烧录系统的U盘就可以进行👍</p><h3 id="PE盘"><a href="#PE盘" class="headerlink" title="PE盘"></a>PE盘</h3><p>什么是PE盘?</p><p>Win PE, Windows预先安装环境 (英语：Microsoft Windows Preinstallation Environment) , 简称Windows PE或PE. 其实就是一个轻量版的Windows系统, 由于体积比较小, 可以直接存储在U盘或者移动硬盘上. 一般电脑维修人员使用其查找故障, 也是装机重要工具之一.</p><p>国内有许多PE工具, 比如<strong>老毛桃</strong>, <strong>大白菜</strong>, <strong>微PE</strong>等</p><p>我推荐🔗 <a href="http://www.uqitong.top/" target="_blank" rel="noopener">优启通</a>. 这个PE盘的工具很齐全, 界面也比较好看, 能兼容更新一些的windows系统.</p><h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><p>基本上出去修电脑说要恢复数据那修电脑的师傅就会打开🔗 <a href="http://www.diskgenius.cn/download.php" target="_blank" rel="noopener">DiskGenius</a>一通操作, 然后如果还找不回来一般他就告诉你修不了了😁</p><p><img src="%E7%BB%99%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%96%B0%E7%94%9F%E4%BB%AC%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8/diskgenius-1567795414357.jpg" alt="DiskGenius"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也许很多同学经常苦恼于找不到免费, 好用, 美观, 干净的软件. 这里为大家推荐一些十分好用的
Windows平台电脑软件及部分安装教程链接. (破解软件的也帮你们找好了哦)&lt;/p&gt;
&lt;p&gt;🌟🌟🌟 &lt;a href=&quot;#一键跳转Sci-Hub&quot;&gt;这里&lt;/a&gt;, &lt;a href=&quot;#Office全家桶&quot;&gt;这里&lt;/a&gt;和&lt;a href=&quot;#MATLAB&quot;&gt;这里&lt;/a&gt;有学校给大家提供的福利的说明 😏&lt;/p&gt;
    
    </summary>
    
      <category term="科普" scheme="https://uestc-msc.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="LeoJhonSong" scheme="https://uestc-msc.github.io/tags/LeoJhonSong/"/>
    
  </entry>
  
  <entry>
    <title>灯泡的硬件入门</title>
    <link href="https://uestc-msc.github.io/2019/09/01/Getting-Started-With-Hardware/"/>
    <id>https://uestc-msc.github.io/2019/09/01/Getting-Started-With-Hardware/</id>
    <published>2019-09-01T13:48:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>因为有的小伙伴还想看硬件方面的入门，所以我就请了格拉斯哥学院电工专业的灯泡给大家写几句。</p><a id="more"></a><h2 id="The-words-in-front"><a href="#The-words-in-front" class="headerlink" title="The words in front"></a>The words in front</h2><p>因为我们学院（格院）硬核专业课都在大三大四，所以我只能分享一点电子方面入门的经验，如果和我一样，之前没有接触过相关内容，可以参考我的分享，如果你之前已经有相关学习经历，可以找群里的宋姐姐，明佬，他们比我厉害得多。</p><h2 id="The-programming-language"><a href="#The-programming-language" class="headerlink" title="The programming language"></a>The programming language</h2><p>硬件入门也要从C语言开始，只需要搞懂最基本的语法，会自己写代码即可。不建议看书，看了也会忘，而且很多内容用不上。不需要学算法。</p><h2 id="The-Single-chip-microcomputer"><a href="#The-Single-chip-microcomputer" class="headerlink" title="The Single chip microcomputer"></a>The Single chip microcomputer</h2><p>对C了解一些了就可以学单片机了，选一款单片机开始入门，我是从arduino入门的，也有的是学51，或者32，我不会51，32所以没法讲。如果是学32的话可以问明佬，好像是从f系列开始学，我们院学的L系列，格院的朋友可以问高总或者我。</p><h3 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h3><p>说一下arduino的好处，写起来基本和C一样，各种API包装好了可以直接调，就不用管很多配置的事情了，所以作为入门算是最简单的。成本上，不买原装进口的arduino就比较便宜，可以在淘宝上买套装，配好了一堆传感器，省了很多事情。</p><p>b站上能搜到arduino的入门教程，按着他教的开始就是跑各种传感器的程序，花式点灯什么的，主要了解一下数字和模拟I/O，pwm，串口调试。这些作为入门会玩的很开心的，真心觉得blink的成就感比print一个hello world要大。</p><h2 id="Competition"><a href="#Competition" class="headerlink" title="Competition"></a>Competition</h2><p>然后开学应该会有一个盟升杯的比赛，可以去摸鱼（抱大腿.jpg），可以学到电设比赛是怎么进行的，合作的比赛该怎么分工。</p><h1 id="What’s-more"><a href="#What’s-more" class="headerlink" title="What’s more"></a>What’s more</h1><ol><li>在使用各种电子元件的时候，学习如何会看datasheet，主要看怎么接线，和一些要计算的相关参数</li><li>学会用多用电表和示波器检测电路</li><li>有兴趣还可以学焊板子，建模软件（solidworks cad），仿真软件（不是重点，但比赛可能会用到）</li></ol><p>## </p><p>说一下我这一年接触EE的感觉吧。其实EE学的内容是真的杂，真的多，以上列举的都只是嵌入式的一点点入门，关于数字电路，模拟电路，信号系统之类的我都不懂，所以也讲不出来。</p><p>即使是学完了所有专业课，也远远不是EE的目的，EE的research可以各有领域，他会把你学的知识和其他学科进行结合，举例子我们在格拉斯哥大学听的那边做research的人在做的一些东西：比如生物医学里的仪器，激光应用，航天领域，机器人相关的东西，这些都是建立在EE的基础理论和应用上的，所以方向真的很多。</p><p>当然EE也有本身电子相关的方向，但那些我也不了解，你们可以找宋姐姐进行交流，他是我偶像。</p><p>如果你没有搞清楚自己想往哪个方面发展，那就把数理基础学好一点吧，基本学了的早晚会用上的。</p><p>EE的入门非常的玄学，你的电路时常会出一些老师都没法立刻给你答案的问题，需要你用多用电表一个一个排除，用示波器显示出来挨个的分析，这是一个十分耗费精力和兴趣的过程，所以一定要坚持下来啊！</p><p>最后，欢迎加入微软学生俱乐部，这里有唱歌跳舞投资写代码都会的全才天乐姐姐，有可以给你画老婆的富婆部长严叔叔，带你唱歌喝酒蹦迪的社会高总，也有什么都不会但是可以帮你当电灯泡的我，还有各种各样超级nice的学长学姐。大家水群约饭，比赛还可以内部组队，共同努力和进步还是很开心的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为有的小伙伴还想看硬件方面的入门，所以我就请了格拉斯哥学院电工专业的灯泡给大家写几句。&lt;/p&gt;
    
    </summary>
    
    
      <category term="灯泡" scheme="https://uestc-msc.github.io/tags/%E7%81%AF%E6%B3%A1/"/>
    
  </entry>
  
  <entry>
    <title>Overview of Computer Science</title>
    <link href="https://uestc-msc.github.io/2019/09/01/Overview-of-Computer-Science/"/>
    <id>https://uestc-msc.github.io/2019/09/01/Overview-of-Computer-Science/</id>
    <published>2019-09-01T12:05:00.000Z</published>
    <updated>2019-09-23T21:46:48.850Z</updated>
    
    <content type="html"><![CDATA[<p>有的同学表示对计算机有什么方向比较迷茫。应一些小伙伴要求，我就班门弄斧得给大家稍微介绍和总结一下。</p><a id="more"></a><h2 id="专业计算机科研领域榜单-CSRankings"><a href="#专业计算机科研领域榜单-CSRankings" class="headerlink" title="专业计算机科研领域榜单-CSRankings"></a>专业计算机科研领域榜单-CSRankings</h2><p>首先你需要查看一个计算机学科排名的榜单，叫做<a href="http://csrankings.org/" target="_blank" rel="noopener">CSRankings</a>。这个榜单较为全面的展示了计算机学科的各个方向和排名。</p><p>虽然CSRankings有很多大学的信息并不完全，也因此被诟病，但是CSRankings是一个<strong>专门给大学的计算机学科排名的榜单</strong>。而且CSRankings的考量因素并不包括其他榜单考虑的很多较为难以量化和主观的因素，只考虑从一定角度来说，CSRankings做到了完全靠数据说话，完全客观。</p><p>感兴趣的同学可以看看电子科技大学在计算机领域的综合排名和各个细分方向排名是多少。</p><p>左边就是计算机的各个领域和细分方向了。</p><p><a href="https://github.com/Luosuu/MSC/blob/master/assets/AllAreas.png" target="_blank" rel="noopener"><img src="Overview-of-Computer-Science/AllAreas.png" alt="Areas"></a></p><p>同学们就可以看看哪个方向你看上去比较感兴趣，然后 <strong>Google Scholar(谷歌学术)或者wiki(维基百科)</strong> 搜索一下，最好不要用中文搜索。因为在科研领域中，中文是没有地位的，资料非常不完善并且可能搜出来的东西完全是错的或者是歧义。</p><p>这里稍微歪下，稍微介绍下<strong>Google Scholar</strong>，它是谷歌的一个学术搜索引擎，也是最常用的学术资料搜索引擎，无论是搜索论文还是搜索机构，大学，教授都很方便，电子科技大学现在校园网已经可以不用翻墙就可以访问谷歌学术了。</p><h2 id="计算机工程"><a href="#计算机工程" class="headerlink" title="计算机工程"></a>计算机工程</h2><p>细心的同学会注意到“计算机科学与技术”专业代表了两个方向，即“科学”与“技术”。</p><p>那么我们大概了解了“科学”的方向都有了什么之后，就该了解一下工程界的计算机大概的方向了，也就是“技术”的部分。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>我们知道构建一个app一般需要一个美观的界面，那么构建界面和UI的就是<strong>前端</strong>。</p><p>前端包括一些Web上的技术，也就是“写网页”。主要需要学习的是一些HTML，CSS，Javascript等等，还需要学习一些Javascript的框架，如React，Vue等。</p><p>关于Web的前端，<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">w3cschool</a>是个很好的学习资源网站。</p><p>还包括写一些软件的界面，主流的有Qt，Electron，微软家的UWP等等。</p><p>开发移动端的话就要学会一些安卓/iOS的开发技巧了，安卓用Java的比较多，iOS主要是Objective-C和Swift。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>app只有界面不行，还得有功能，功能就需要有服务器和数据库等等的支持，负责这一部分的统称为<strong>后端</strong>。</p><p>可能要学的就是一些服务器和数据库相关的，服务器的话一般都用的Linux系统，所以一定要学会Linux的基本使用方法。</p><p>数据库类型就很多了，如MySQl，而且学校会开设数据库方面的专业课。</p><p>可能还需要学习一些算法知识（其实算法知识或多或少各方面都需要一些）。</p><p>但其实后端包含的面太广了，这里只是说了下典型。</p><p>算法比赛有ACM-ICPC和CCPC。详情可问小灰晖，同时第0次沙龙也有ACM-ICPC的入门介绍。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>软件写出来直接运行可能会有bug，如果直接发布可能会有严重的后果，负责写程序对软件进行各项检查的就是<strong>测试</strong>。</p><p>下面这个表情包就大概能体现一个软件测试的各项工作了。</p><p><a href="https://github.com/Luosuu/MSC/blob/master/assets/ComTech.jpg" target="_blank" rel="noopener"><img src="Overview-of-Computer-Science/ComTech.jpg" alt="表情包"></a></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>当然软件也需要专业的安全保障，对软件进行安全测试就是<strong>安全</strong>部门的工作了，传统的安全防护有对软件进行逆向工程（俗称“破解”）方面的保护，最近比较火的是网络安全，阻拦网络上的各种恶意攻击和病毒。</p><p>安全方面的工作涉及的知识覆盖密码学，web安全，二进制安全等等。</p><p>安全方面有知名的竞赛，其中一种比较火的就是CTF比赛。感兴趣的可以去了解一下。同时现在有<strong>全国大学生信息安全竞赛</strong>。</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>当然也会有一些人是负责总体设计的，他们一般被叫做<strong>架构师</strong>。</p><p>架构师需要深厚丰富的软件开发经验，可以说是软件的设计师。</p><h3 id="What’s-more"><a href="#What’s-more" class="headerlink" title="What’s more"></a>What’s more</h3><p>实际上构建一个app可能会很复杂，上面的分法是很粗糙的，不同的软件公司和不同的软件都会有不同的开发团队组成。</p><p>有些比较赶新潮的公司就会有云技术，AI，大数据等部门。</p><p>这上面是说构建一个app，当然也存在构建一些所谓“基础设施”的，比如操作系统。</p><h2 id="UESTC有什么方向？"><a href="#UESTC有什么方向？" class="headerlink" title="UESTC有什么方向？"></a>UESTC有什么方向？</h2><p>遗憾的是，我们学校计算机科学并没能实现所有方向全覆盖，在我个人看来甚至瘸腿。所以了解我们学校有什么方向就很关键了，因为如果你要本科从事科研相关活动的话就只能从他们中选了。</p><p>先来看一下我们学校计算机学院有什么科研团队。</p><p><a href="https://github.com/Luosuu/MSC/blob/master/assets/Groups.png" target="_blank" rel="noopener"><img src="Overview-of-Computer-Science/Groups.png" alt="Groups"></a></p><p>细心的同学会发现<strong>你电计算机学院大部分教授都是做AI的</strong>，如果你在CSRankings上看过电子科大的各项排名，会发现我们学校计算机视觉（Computer Vision）方向排名非常突出，而计算机视觉是人工智能细分方向之一。</p><p>几乎所有科研团队都做CV，也造就了你电CV强校的事实，但也让你电计算机学科建设略显单一。不过我们也存在做云计算，网络安全，传统算法，操作系统等方向的实验室。</p><p>实际上最后最重要的是找哪个老师，这一点无论你是不是想从事计算机方向的科研都是一样的，所以要到<a href="http://faculty.uestc.edu.cn/" target="_blank" rel="noopener">电子科大教师信息平台</a>去了解。</p><p>当然如果你想了解下这个老师最近在做什么方向的研究，或者看看他实力如何，是不是高产，你就可以用到上面我提到的Google Scholar了，直接搜这个老师，他的学术活动就一目了然了。</p><h2 id="计算机学院的专业"><a href="#计算机学院的专业" class="headerlink" title="计算机学院的专业"></a>计算机学院的专业</h2><p>虽然我认为在电子科技大学，你在哪个专业并不特别影响你真正从事的方向，我认为这是电子科大非常好的一个地方，不过还是有很大的必要了解一下我们学校的专业设置和专业课程。</p><p>专业的课程设置要看《电子科技大学学生培养方案》，你们领了书的话应该有，是一大本很厚的书，找到自己学院然后看课程设置就是了。</p><p>如果还没拿到书可以到各个学院官网下载历年的培养计划。虽然每年培养计划都会有一点点改动。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的同学表示对计算机有什么方向比较迷茫。应一些小伙伴要求，我就班门弄斧得给大家稍微介绍和总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ZhongTianLe" scheme="https://uestc-msc.github.io/tags/ZhongTianLe/"/>
    
  </entry>
  
  <entry>
    <title>电子科技大学微软学生俱乐部2018企划</title>
    <link href="https://uestc-msc.github.io/2018/08/16/%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E5%BE%AE%E8%BD%AF%E5%AD%A6%E7%94%9F%E4%BF%B1%E4%B9%90%E9%83%A82018%E4%BC%81%E5%88%92/"/>
    <id>https://uestc-msc.github.io/2018/08/16/电子科技大学微软学生俱乐部2018企划/</id>
    <published>2018-08-15T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>2018届主席团</p><p>2018年7月26日</p><p>“微软学生俱乐部”（Microsoft Student Club, 简称 MSC）是微软亚洲研究院与高校合作培养人才的一种探索。自 2000 年 10 月 15 日第一个俱乐部在四川大学成立起，至今全国已有34所高校拥有了自己的 MSC。俱乐部本着“学习先进技术，开拓创新思维，体验多元文化，成就一流人才”的宗旨，在各高校校团委、相关学院的指导下，通过学生项目、线上微课、产品体验、技术沙龙、学生大赛等活动，培养部员的创新头脑、实践能力和组织能力，让来自不同领域的同学得以展现才华，共同成长。电子科大微软学生俱乐部到目前为止已经走过16个年头，我们期待在新的一年遇见更好的你们。关于俱乐部的详细介绍可见：</p><a id="more"></a><ol><li>新人技术培养计划</li></ol><ul><li><p>C/C++方向(推荐给萌新们，从零开始到熟练玩乐C++)</p></li><li><p>Python方向(从零开始，快速玩转)</p></li><li><p>Ps,AE等技术学习</p></li><li><p>前端开发组 //可能会有</p></li><li><p>C#方向(从零开始接触Windows应用开发) //可能会有</p><p>1.1 Q&amp;A</p></li><li><p>Q：我不是计算机专业的什么都不会可以参加么？</p></li><li><p>A：俱乐部从来不局限于专业与基础只要你对技术感兴趣，新人培训完全是从零开始，请不要担心</p></li><li><p>Q：培训模式是什么样子？</p></li><li><p>A：技术培养主要精力放在线上，由技术负责人布置任务，新人根据人数分成小组，完成学习进度并进行代码提交，遇到的问题可以向技术负责人以及群里学长学姐询问。同时，小组根据进度至少每两周进行一次线下交流，组内沟通学习进度与出现的问题。学期末每个技术组需要完成一个小项目，作为年会时的展示，并对贡献度较大的成员进行奖励。</p></li><li><p>Q：我是文科生不会技术可以参与么？</p></li><li><p>A：俱乐部非常的欢迎具有写作和运营能力的同学。我们的微信公众号，网站都可以给你提供一个平台，供你发挥。</p></li></ul><ol><li>学术沙龙</li></ol><ul><li><p>一小时的科普活动</p></li><li><p>一小时认识入门计算机前沿领域</p></li><li><p>线上分享科技圈新消息，以及微软内部新技术</p><p>2.1 Q&amp;A</p></li><li><p>Q：什么是前沿领域？</p></li><li><p>A：比如机器学习相关的自然语言处理，计算机视觉。强化学习，网络安全等</p></li></ul><ol><li><p>图书奖学金计划</p><p>俱乐部成员可向俱乐部申请图书奖学金，用与学习某项计算机相关专业技术。当申请者认真读完该书，并且通过写博客或者开小型talk的方式来证明已学到该书的知识之后，俱乐部将为其报销购书款项。由于事先我们签署过协议，这使得申请者更容易坚持把书认真读完，而不易半途而废。我们想达到的目的是激励俱乐成员进行学习，并且学有所成。</p></li><li><p>Special activity</p><ol><li><p>PPT脑洞创意赛</p><p>不论你是新生还是老油条，都会对于自己期待的生活有所向往。也许现在还没有成型的产品，那么请你和队友展示你们共同的愿景，让我们也体会这产品的有趣或实用或是艺术与美好的体现。</p></li><li><p>创新杯and微软校园菁英计划</p><p>俱乐部将会展开创新杯的宣传，欢迎俱乐部成员组队报名参加微软创新杯。从四川赛区走向全国总决赛，再到全球总决赛。希望电子科大的同学能够到达西雅图，代表UESTCer，书写自己的的传奇。</p></li><li><p>微软“编程之美”</p><p>俱乐部承担了编程之美比赛的宣传，也会组队进行比赛，领略微软的最新科技。比赛具有高额奖金，欢迎各位同学参与。</p></li><li><p>成都高校Hackathon</p><p>由电子科技大学和四川大学共同举办。一场24小时的头脑风暴与demo开发，俱乐部成员可自由进行组队，参与黑客马拉松活动。微软提供官方API和Azure云计算平台，参赛队用于专门的场地，享受俱乐部提供的餐点，零食，饮料，感受不同思想碰撞的的过程，开发的乐趣。参赛者有机会获得微软纪念T恤和奖金。</p></li></ol></li><li><p>俱乐部内部的长期活动</p></li></ol><ul><li><p>人工智能与机器学习小组</p><p>参与人员以大二及以上同学为主。欢迎有技术基础以及对这个方向感兴趣的大一成员参与。活动形式以定期线下组会交流方式进行，交流学术圈、科研圈的内容，对论文进行讲述。</p></li></ul><ol><li><p>还可能玩什么</p><ol><li><p>编程一小时活动</p><p>我们将会和周边的中小学进行互动，走进课堂，用有趣的方式(比如微软提供编程小游戏)给小朋友们提供一次编程入门体验</p></li><li><p>软粉聚会</p><p>你可以体验大家使用的SurfaceBook,SurfacePro,Xbox等产品。共同交(tu)流(cao)，享受软粉的快乐。</p></li></ol></li><li><p>福利</p><ol><li><p>微软学生夏令营</p><p>每年八月份，俱乐部可以推选优秀成员免费去北MSRA参与为期一周左右的夏令营。</p><p>【报销来回交通费用，四星级酒店，复式房型】以往经历参考：<a href="https://www.zhihu.com/question/31743851" target="_blank" rel="noopener">https://www.zhihu.com/question/31743851</a><a href="http://chuansong.me/n/2250686" target="_blank" rel="noopener">http://chuansong.me/n/2250686</a></p></li><li><p>日常活动和年会中的微软纪念品</p></li></ol><ul><li>活动限定T恤</li><li>office365全年订阅</li><li>星巴克联名杯</li><li>一系列神奇礼物</li></ul><ol><li><p>加入MSP计划，获得价值6W元的Visual Studio订阅</p><p>详见：<a href="https://msdn.microsoft.com/en-us/microsoftstudentpartners.aspx。俱乐部成员在申请MSP时将占巨大优势。电子科技大学这几年一共诞生了超过十名MSP。微软校园精英面向全球，不仅仅是计算机专业的学生，推广他的学生项目，让当代学生站在科技的前沿，领略科技的魅力，更希望他们能于其中，利用微软的技术，一起去改善生活，改变世界。无论是微软亚洲研究院下30多所高校的微软学生俱乐部，亦或者是全球范围内的" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/microsoftstudentpartners.aspx。俱乐部成员在申请MSP时将占巨大优势。电子科技大学这几年一共诞生了超过十名MSP。微软校园精英面向全球，不仅仅是计算机专业的学生，推广他的学生项目，让当代学生站在科技的前沿，领略科技的魅力，更希望他们能于其中，利用微软的技术，一起去改善生活，改变世界。无论是微软亚洲研究院下30多所高校的微软学生俱乐部，亦或者是全球范围内的</a> Microsoft Student Partner。加入MSP，你将获得更加开阔的眼界、认识来自全国乃至各高校的优秀同龄人、还有每年价值上万美元的MSDN订阅。</p></li><li><p>MSRA内推俱乐部中的成员，俱乐部可以给予亚研院的内推资格。微软亚洲研究院属于国内计算机领域顶尖的实习机构。关于亚研院的实习介绍可见：<a href="https://www.msra.cn/zh-cn/news/features/0cc4c253-ba4a-4dca-9604-51ec63e47232" target="_blank" rel="noopener">https://www.msra.cn/zh-cn/news/features/0cc4c253-ba4a-4dca-9604-51ec63e47232</a></p></li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018届主席团&lt;/p&gt;
&lt;p&gt;2018年7月26日&lt;/p&gt;
&lt;p&gt;“微软学生俱乐部”（Microsoft Student Club, 简称 MSC）是微软亚洲研究院与高校合作培养人才的一种探索。自 2000 年 10 月 15 日第一个俱乐部在四川大学成立起，至今全国已有34所高校拥有了自己的 MSC。俱乐部本着“学习先进技术，开拓创新思维，体验多元文化，成就一流人才”的宗旨，在各高校校团委、相关学院的指导下，通过学生项目、线上微课、产品体验、技术沙龙、学生大赛等活动，培养部员的创新头脑、实践能力和组织能力，让来自不同领域的同学得以展现才华，共同成长。电子科大微软学生俱乐部到目前为止已经走过16个年头，我们期待在新的一年遇见更好的你们。关于俱乐部的详细介绍可见：&lt;/p&gt;
    
    </summary>
    
      <category term="管理层公告" scheme="https://uestc-msc.github.io/categories/%E7%AE%A1%E7%90%86%E5%B1%82%E5%85%AC%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>Hackathon参赛指南</title>
    <link href="https://uestc-msc.github.io/2018/06/01/Hackathon%E5%8F%82%E8%B5%9B%E6%8C%87%E5%8D%97/"/>
    <id>https://uestc-msc.github.io/2018/06/01/Hackathon参赛指南/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>Hackathon顾名思义，其实就是黑客的马拉松或者编程马拉松——以电脑为跑道、以编程为体力的一场技术比赛。跟马拉松的精神很类似，黑客马拉松可以让很多不认识的人在一个特定的时间内相聚在一起，以他们想要的方式，去做他们想做的事情。对于程序员来说，Hackathon 绝对是一项激动人心的活动。那么第一次参加 Hackathon 的话，需要提前知道和准备些什么呢？参赛的时候又有哪些需要注意的事情呢？参加 Hackathon 会有什么收获呢？</p><a id="more"></a><h1 id="Hackathon-的特点"><a href="#Hackathon-的特点" class="headerlink" title="Hackathon 的特点"></a>Hackathon 的特点</h1><p>正所谓知己知彼，百战不殆。那么 Hackathon 有哪些特点呢？</p><ul><li>时间短：比如这次的 Hackathon 就只有 24 小时，除去吃饭和休息，留给大家开发的时间已经不多了。</li><li>强度高：开发过程中可能遇到各种各样的问题，这些问题都需要在短时间内快速解决，甚至还可能需要现学一门新技术新语言。总之，从 0 开始创造一个产品，时间短任务重，体力和脑力都需要爆发。</li><li>创造力：Hackathon 的精髓在于以自己想要的方式，去做任何自己想做的事情。不再受限于工作中的各种业务需求，用天马行空的脑洞，挑战已有的技术、理念，去创造新的产品，让世界变得更美好。</li><li>配合度：Hackathon 是一项团队赛，需要队员之间的积极配合和及时沟通，这是一场团战，参团协作很重要。切忌单打独斗。</li></ul><h1 id="Hackathon-可能会用到的工具："><a href="#Hackathon-可能会用到的工具：" class="headerlink" title="Hackathon 可能会用到的工具："></a>Hackathon 可能会用到的工具：</h1><p>简单易用，你可能会用到。</p><ul><li>微软各类认知服务API <a href="https://azure.microsoft.com/zh-cn/try/cognitive-services/" target="_blank" rel="noopener">https://azure.microsoft.com/zh-cn/try/cognitive-services/</a></li><li>Azure云服务</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p><strong>0. 需要准备什么？</strong>带上你和你的电脑，准时参赛。<strong>1. 了解大赛规则</strong>• 不能违反的规则• 评分规则<strong>2. 找准定位，明确分工</strong>根据自己的专业技能和个人特长明确自己的定位，是队长还是队员？是开发还是产品？确定每个人的职责和目标，然后尽情地发挥所长吧。<strong>3. 合理分配资源，控制进度</strong>在比赛一开始就制定项目计划和开发流程很有必要。做什么不做什么，先做什么后做什么，什么时间节点应该完成什么功能等。<strong>4. 适当的休息</strong>体能的分配也很重要，所谓磨刀不误砍柴工，充足的精力才能在高强度的开发环境下完成任务，尽量做到按时吃饭和休息，记得多喝水。<strong>5. 快速迭代</strong>快速地完成第一个产品原型，然后再去增改其他功能。<del>这个时候，代码优雅不优雅什么的就算了吧，先搞出来再说。</del><strong>6. 坚定目标，不忘初心</strong>比如遇到的困难太多，做着做着突然就不知道接下来该怎么办了，这个时候，一定要坚持！<strong>7. 善于求助</strong>搞不定的部分要尽快向队友甚至别的团队求助，千万不要不好意思，团队之间不完全是竞争关系，也可以互相合作。<strong>8. 产品演示</strong>酒香也怕巷子深，好的产品介绍很重要。真诚地向大家表达你们的想法，展示你们的成果。另外一份漂亮的 PPT ，一个好的讲演人总是更能吸引人。</p><h1 id="Hackathon-的收获"><a href="#Hackathon-的收获" class="headerlink" title="Hackathon 的收获"></a>Hackathon 的收获</h1><p><strong>1. 认识大牛</strong>同来参赛的开发者中，可能是acm大佬，可能是国奖得主，可能是论文在手的磕盐党，也可能是设计出好看ui的美工大大，亦或是能够根据想法作出近趋完美presentation的讲演者。<strong>2. 做点好玩的东西</strong>繁复的敲击工作，作业工作的需求，对于 coding 已经失去了最初的乐趣。那么这一次，你说了算！去做一个在你心目中真正想做的产品吧。<strong>3. 一次难得的经历</strong>彼时热血方刚，挥斥方遒，手指与键盘共舞，代码与 idea 齐飞。将来的某一天回忆起来，这绝对是一场值得你怀念的经历。</p><p>最后的最后，Hackathon 是一种乐趣，而不是一个死气沉沉的编程比赛，让我们尽情地享受它吧。Just enjoy it!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hackathon顾名思义，其实就是黑客的马拉松或者编程马拉松——以电脑为跑道、以编程为体力的一场技术比赛。跟马拉松的精神很类似，黑客马拉松可以让很多不认识的人在一个特定的时间内相聚在一起，以他们想要的方式，去做他们想做的事情。对于程序员来说，Hackathon 绝对是一项激动人心的活动。那么第一次参加 Hackathon 的话，需要提前知道和准备些什么呢？参赛的时候又有哪些需要注意的事情呢？参加 Hackathon 会有什么收获呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Hackathon" scheme="https://uestc-msc.github.io/categories/Hackathon/"/>
    
    
  </entry>
  
  <entry>
    <title>【创新杯】2018创新杯宣讲会·电子科大站</title>
    <link href="https://uestc-msc.github.io/2017/12/02/%E3%80%90%E5%88%9B%E6%96%B0%E6%9D%AF%E3%80%912018%E5%88%9B%E6%96%B0%E6%9D%AF%E5%AE%A3%E8%AE%B2%E4%BC%9A%C2%B7%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E7%AB%99/"/>
    <id>https://uestc-msc.github.io/2017/12/02/【创新杯】2018创新杯宣讲会·电子科大站/</id>
    <published>2017-12-01T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>2017年12月1日，俱乐部与微软成都合作举办了微软创新杯2018年的宣讲会。</p><p>来自微软的技术人员首先介绍了微软的AI技术，包括Cognitive Service，Bot Framework，以及Azure Machine Learning. 在场同学积极参与宣讲，现场气氛非常热烈。</p><a id="more"></a><p><img src="%E3%80%90%E5%88%9B%E6%96%B0%E6%9D%AF%E3%80%912018%E5%88%9B%E6%96%B0%E6%9D%AF%E5%AE%A3%E8%AE%B2%E4%BC%9A%C2%B7%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E7%AB%99/IMG_20171201_203332-300x169.jpg" alt="img"></p><p>图为积极回答问题的同学。</p><p><img src="%E3%80%90%E5%88%9B%E6%96%B0%E6%9D%AF%E3%80%912018%E5%88%9B%E6%96%B0%E6%9D%AF%E5%AE%A3%E8%AE%B2%E4%BC%9A%C2%B7%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E7%AB%99/IMG_20171201_203649-300x169.jpg" alt="img"></p><p><img src="%E3%80%90%E5%88%9B%E6%96%B0%E6%9D%AF%E3%80%912018%E5%88%9B%E6%96%B0%E6%9D%AF%E5%AE%A3%E8%AE%B2%E4%BC%9A%C2%B7%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E7%AB%99/IMG_20171201_203654-300x169.jpg" alt="img"></p><p>图为技术人员介绍报名通道。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年12月1日，俱乐部与微软成都合作举办了微软创新杯2018年的宣讲会。&lt;/p&gt;
&lt;p&gt;来自微软的技术人员首先介绍了微软的AI技术，包括Cognitive Service，Bot Framework，以及Azure Machine Learning. 在场同学积极参与宣讲，现场气氛非常热烈。&lt;/p&gt;
    
    </summary>
    
      <category term="创新杯" scheme="https://uestc-msc.github.io/categories/%E5%88%9B%E6%96%B0%E6%9D%AF/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
  </entry>
  
  <entry>
    <title>【给萌新的Python】OOP基础</title>
    <link href="https://uestc-msc.github.io/2017/11/18/%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E7%9A%84Python%E3%80%91OOP%E5%9F%BA%E7%A1%80/"/>
    <id>https://uestc-msc.github.io/2017/11/18/【给萌新的Python】OOP基础/</id>
    <published>2017-11-17T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>什么是OOP？</p><p><strong>面向对象程序设计</strong>（英语：<strong>Object-oriented programming</strong>，<a href="https://www.wikiwand.com/zh/缩写" target="_blank" rel="noopener">缩写</a>：<strong>OOP</strong>）是種具有<a href="https://www.wikiwand.com/zh/对象_(计算机科学)" target="_blank" rel="noopener">物件</a>概念的<a href="https://www.wikiwand.com/zh/编程范型" target="_blank" rel="noopener">程式編程典範</a>，同时也是一种程序开发的抽象方针。它可能包含<a href="https://www.wikiwand.com/zh/数据" target="_blank" rel="noopener">資料</a>、屬性、<a href="https://www.wikiwand.com/zh/源代码" target="_blank" rel="noopener">程式碼</a>與<a href="https://www.wikiwand.com/zh/方法_(電腦科學)" target="_blank" rel="noopener">方法</a>。对象則指的是<a href="https://www.wikiwand.com/zh/类_(计算机科学)" target="_blank" rel="noopener">类</a>的实例。它将<a href="https://www.wikiwand.com/zh/物件_(電腦科學)" target="_blank" rel="noopener">对象</a>作为<a href="https://www.wikiwand.com/zh/程序" target="_blank" rel="noopener">程序</a>的基本单元，将程序和<a href="https://www.wikiwand.com/zh/数据" target="_blank" rel="noopener">数据</a><a href="https://www.wikiwand.com/zh/封裝_(物件導向程式設計)" target="_blank" rel="noopener">封装</a>其中，以提高软件的重用性、灵活性和扩展性。</p><a id="more"></a><p>面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想刚好相反：传统的程序设计主张将程序看作一系列<a href="https://www.wikiwand.com/zh/函数" target="_blank" rel="noopener">函数</a>的集合，或者直接就是一系列对电脑下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。</p><p>简而言之，对象就是把程序的一些函数分类进行了整合，使之更加明确灵活。</p><p>下面结合例子来讲述OOP。</p><hr><p>假设我们去银行取钱，那么流程大概是这样的：</p><p>ATM机发起请求，后台接受请求并返回交易码，ATM机提示输入密码，将密码发送给后台，后台验证之后返回结果，ATM机取出现金，向后台发起记录请求，后台更新账户信息，并且增加交易记录，用户取钱。</p><p>在这个流程中我们牵涉到了四个实体：人类，ATM机，后台，账户。</p><p>ATM机负责一系列操作，后台负责另外一些操作，对象和对象之间可以相互交流信息，同时又各司其职。</p><p>基于这样思想的编程，成为面向对象的编程。现在我们来看一个编程上的实例：</p><p>学生有语文、数学、英语成绩，有学号和姓名，还需要一个相关的函数来计算他的总分。</p><p>分析下来，我们可以构建出一个学生类。</p><p>这个类，拥有一些属性：语文、数学、英语，学号、姓名，还拥有一个方法：计算成绩。</p><p>这个框架定下来之后，我们就构建好了一个类。将这个类实例化，比如一个叫小明的同学，就是一个对象。对象和类是抽象和具体的关系，类是抽象的，是一类事物将特征提取出来的概括性的描述，而对象是具体到了某一个事物。</p><hr><p>现在我们来构建这个类：</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E7%9A%84Python%E3%80%91OOP%E5%9F%BA%E7%A1%80/img_5a1052e59652c.png" alt="img"></p><p>类有两种成员：属性和方法。</p><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p><p>在C++中，这个方法被称为“构造函数”，在初始化一个对象的时候，要用一些必要的参数才能将其实例化。因为Python是动态语言，你也可以自由地设定类的属性。</p><p>注意到<code>__init__</code>方法的<strong>第一个参数永远是self，表示创建的实例本身</strong>，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去。</p><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是OOP？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象程序设计&lt;/strong&gt;（英语：&lt;strong&gt;Object-oriented programming&lt;/strong&gt;，&lt;a href=&quot;https://www.wikiwand.com/zh/缩写&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;缩写&lt;/a&gt;：&lt;strong&gt;OOP&lt;/strong&gt;）是種具有&lt;a href=&quot;https://www.wikiwand.com/zh/对象_(计算机科学)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;物件&lt;/a&gt;概念的&lt;a href=&quot;https://www.wikiwand.com/zh/编程范型&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程式編程典範&lt;/a&gt;，同时也是一种程序开发的抽象方针。它可能包含&lt;a href=&quot;https://www.wikiwand.com/zh/数据&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;資料&lt;/a&gt;、屬性、&lt;a href=&quot;https://www.wikiwand.com/zh/源代码&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程式碼&lt;/a&gt;與&lt;a href=&quot;https://www.wikiwand.com/zh/方法_(電腦科學)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;方法&lt;/a&gt;。对象則指的是&lt;a href=&quot;https://www.wikiwand.com/zh/类_(计算机科学)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;类&lt;/a&gt;的实例。它将&lt;a href=&quot;https://www.wikiwand.com/zh/物件_(電腦科學)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;对象&lt;/a&gt;作为&lt;a href=&quot;https://www.wikiwand.com/zh/程序&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程序&lt;/a&gt;的基本单元，将程序和&lt;a href=&quot;https://www.wikiwand.com/zh/数据&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据&lt;/a&gt;&lt;a href=&quot;https://www.wikiwand.com/zh/封裝_(物件導向程式設計)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;封装&lt;/a&gt;其中，以提高软件的重用性、灵活性和扩展性。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://uestc-msc.github.io/categories/Python/"/>
    
      <category term="OOP" scheme="https://uestc-msc.github.io/categories/OOP/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
  </entry>
  
  <entry>
    <title>【给萌新的Python】大作业（1）&amp;补充知识</title>
    <link href="https://uestc-msc.github.io/2017/11/01/%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E7%9A%84Python%E3%80%91%E5%A4%A7%E4%BD%9C%E4%B8%9A%EF%BC%881%EF%BC%89&amp;%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/"/>
    <id>https://uestc-msc.github.io/2017/11/01/【给萌新的Python】大作业（1）&amp;补充知识/</id>
    <published>2017-10-31T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>布置大作业前，我希望介绍两个结构进行扫尾。</p><p>1，列表生成式。</p><p>什么是列表生成式呢，简而言之就是，你可以将for循环用一种更为简练的方式表达出来，最后你可以得到一个列表。</p><a id="more"></a><p>举个例子，要生成list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>可以用<code>list(range(1, 11))</code>，</p><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？方法一是循环：</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E7%9A%84Python%E3%80%91%E5%A4%A7%E4%BD%9C%E4%B8%9A%EF%BC%881%EF%BC%89&amp;%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/img_59f9dcbd9b021.png" alt="img"></p><p>更简单的方法则是使用列表生成式。</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E7%9A%84Python%E3%80%91%E5%A4%A7%E4%BD%9C%E4%B8%9A%EF%BC%881%EF%BC%89&amp;%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/img_59f9dce08b1f4.png" alt="img"></p><p>如果循环体非常简单，那么这个方法将会相当有效。</p><p>另外，因为Python的for循环可以同时迭代多个变量。比如<code>dict</code>的<code>items()</code>可以同时迭代key和value：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = {'x': 'A', 'y': 'B', 'z': 'C' }</span><br><span class="line">&gt;&gt;&gt; for k, v in d.items():</span><br></pre></td></tr></tbody></table></figure><p>2，迭代器：</p><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p><p>生成器的最显著特点是即时演算。</p><p>要创建一个generator，有很多种方法。第一种方法很简单，<strong>只要把一个列表生成式的[]改成()</strong>，就创建了一个generator：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [x * x for x in range(10)]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line">&gt;&gt;&gt; g = (x * x for x in range(10))</span><br><span class="line">&gt;&gt;&gt; g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;</span><br></pre></td></tr></tbody></table></figure><p>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个generator。</p><p>generator保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值。</p><p><strong>试一试，创建一个生成器，然后不断调用它。</strong></p><hr><p>希望你已经试过了。亲手进行练习非常重要，希望你能重视起来。</p><p>当然，我们实际使用的时候，很可能也是用for循环去生成每一个元素。</p><p>那么第二种方法生成generator呢？当生成器不方便用列表推导式表示怎么办呢？</p><p>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def fib(max):</span><br><span class="line">    n, a, b = 0, 0, 1</span><br><span class="line">    while n &lt; max:</span><br><span class="line">        yield b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + 1</span><br><span class="line">    return 'done'</span><br></pre></td></tr></tbody></table></figure><p>这个函数的yield的意思是：你的函数开始执行，碰到yield的时候返回一个值。再次调用这个函数的时候，从yield这里继续运行（而不是从头）。在这个函数里，我们先初始化了变量，然后进入循环。第一次循环内，返回了b；再一次调用函数时，是从第一次循环开始的，继续执行第一次循环，循环到第二次，yield返回值……</p><hr><p>3，迭代器</p><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p><p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</p><p>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</p><p>这是因为Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</p><hr><p>大作业：</p><p>作业目标：实现基于爬虫数据的数据统计</p><p>1，二选一：requests+beautifulsoup或者scrapy爬虫框架。一般来说爬虫框架都是更好的选择，但是相对比较难上手。</p><p>2，爬取“豆瓣电影Top 250”页面，并且适当清洗数据格式，将其保存到本地。</p><p>3，使用正则表达式（需要一些简单的学习），提取所有电影的年份、国籍；</p><p>一个小工具：<a href="http://tool.oschina.net/regex" target="_blank" rel="noopener">http://tool.oschina.net/regex</a></p><p>4，进行合适的统计（最好使用pandas等数据分析库，推荐学习），自定分析方法，得出至少三个有用的结论（比如说这些电影最多出现在什么年间，什么国家上榜最多）</p><p>加分项：</p><p>1，使用了scrapy爬虫框架；</p><p>2，分析了超过三项结论（比如说根据词频判断电影类型）</p><p>一些说明：</p><p>这个大作业希望各位在11月20日之前完成，期间我们还会讲新的知识。</p><p>善用搜索引擎，这些Python库都有完整的中文文档。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布置大作业前，我希望介绍两个结构进行扫尾。&lt;/p&gt;
&lt;p&gt;1，列表生成式。&lt;/p&gt;
&lt;p&gt;什么是列表生成式呢，简而言之就是，你可以将for循环用一种更为简练的方式表达出来，最后你可以得到一个列表。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://uestc-msc.github.io/categories/Python/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
  </entry>
  
  <entry>
    <title>【给萌新的Python】练习（1）</title>
    <link href="https://uestc-msc.github.io/2017/10/21/%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E7%9A%84Python%E3%80%91%E7%BB%83%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <id>https://uestc-msc.github.io/2017/10/21/【给萌新的Python】练习（1）/</id>
    <published>2017-10-20T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>在第一次线下沙龙时，我们讨论了Python的基本语法。我们尤其讨论了一些特别的数据类型：列表、元组、字典、集合。我们还讨论了基础的方方面面。接下来我想请各位按照之前分好的小组做完下列习题：</p><a id="more"></a><p>一、请按以下步骤完成Python指令（25分）：</p><p>1，新建一个列表。</p><p>2，在列表中依次添加两个元素：1，1</p><p>3，根据斐波那契数列的生成规律，在列表中再添加7个元素。（提示：可以使用for循环）</p><p>4，将列表倒序打印出来。</p><p>二、请按以下步骤编写Python文件（25分）：</p><p>1，新建一个文本文件并打开。</p><p>2，生成一个5*1的列表，储存以下矩阵：A=[1,5,6,6.5,8]</p><p>3，生成一个1*5的列表，储存以下矩阵：B=[2,4,10,12,5.5]</p><p>4，计算AB，A点乘B，A+B，A-B。</p><p>5，将上述结果逐行写入文本文件并保存。</p><p>三，请按以下步骤编写Python文件（15分）：</p><p>1，新建一个列表。</p><p>2，摇100次骰子，记录值。</p><p>3，将平均值、中位数、众数写进列表。</p><p>四，请按以下步骤编写Python文件（15分）：</p><p>1，有如下值集合 v1 = [11,22,33,44,55,66,77,88,99,90]，将所有大于 66 的值保存至字典的第一个key中。</p><p>2，将小于 66 的值保存至第二个key的值中。即： {‘k1’: 大于66的所有值, ‘k2’: 小于66的所有值}v2 = {‘k1′: [],’k2’:[] }</p><p>五，请按以下步骤编写Python文件（20分）:</p><p>1，已知ex可以用多项式逼近：ex = 1+x+x2/2!+…+xn/n!，请计算n=10，100，1000时的具体数值。</p><p>2，使用input函数输入n，要求输出一个正确的值。</p><hr><p>以上问题拿到80分以上视为合格。请在一周内完成任务。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在第一次线下沙龙时，我们讨论了Python的基本语法。我们尤其讨论了一些特别的数据类型：列表、元组、字典、集合。我们还讨论了基础的方方面面。接下来我想请各位按照之前分好的小组做完下列习题：&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://uestc-msc.github.io/categories/Python/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
  </entry>
  
  <entry>
    <title>在Azure上部署TensorFlow（转载）</title>
    <link href="https://uestc-msc.github.io/2017/10/01/%E5%9C%A8Azure%E4%B8%8A%E9%83%A8%E7%BD%B2TensorFlow%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>https://uestc-msc.github.io/2017/10/01/在Azure上部署TensorFlow（转载）/</id>
    <published>2017-09-30T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.842Z</updated>
    
    <content type="html"><![CDATA[<p>Training neural networks (deep learning) is very compute-intensive. Fast GPUs can make those sessions, which sometimestake hours, days or weeks go orders of magnitude faster. However, laptops usually don’t come with the fastest GPUs and havingto maintain a desktop machine only to occasionally run deep learning tasks is extra hassle.</p><a id="more"></a><p>Cloud providers now offer virtual machines (VMs) with GPUs which run in data centers and can be used by anybody on an hourly basis.Below is a quick tutorial that walks through setting up a VM in Microsoft Azure with the necessary driversto train neural networks using <a href="https://www.tensorflow.org/" target="_blank" rel="noopener">TensorFlow</a>.</p><p>First, if you haven’t done so already, create an <a href="https://azure.microsoft.com/en-us/free" target="_blank" rel="noopener">Azure</a> account, install the Azure 2.0 command line interface (CLI)…</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install azure-cli</span><br></pre></td></tr></tbody></table></figure><p>… and follow the login procedure:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az login</span><br></pre></td></tr></tbody></table></figure><p>Azure manages resources (virtual machines, storage etc.) via resource groups.GPU virtual machine instances are currently available in the East US region. If you already have a group for that region feel freeto use it, otherwise create a new resource group:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az group create -n tensorflow -l EastUS</span><br></pre></td></tr></tbody></table></figure><p>We will connect to the machine via SSH and need to create a key pair:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f ~/.ssh/tensorflow_id_rsa -t rsa -b 2048 -C '' -N ''</span><br></pre></td></tr></tbody></table></figure><p>Next, we create the actual virtual machine running Ubuntu 16.04.We choose the cheapest and least powerful GPU size (<a href="https://azure.microsoft.com/en-us/blog/azure-n-series-preview-availability" target="_blank" rel="noopener">NC6</a>) and downgrade from premium (SSD) to standard storage (HDD) as the former is not supported for NC instances yet.</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm create -g tensorflow -n tensorflow --image Canonical:UbuntuServer:16.04-LTS:latest --size Standard_NC6 --storage-sku Standard_LRS --admin-username tensorflow --ssh-key-value ~/.ssh/tensorflow_id_rsa.pub</span><br></pre></td></tr></tbody></table></figure><p>Once completed, the command will print the IP address for the newly created machine:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "publicIpAddress": "127.0.0.1",</span><br><span class="line">  "resourceGroup": "tensorflow"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>The VM is now running in a data center (and charging for cycles).The following commands can be used to deallocate and restart anytime:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">az vm deallocate -g tensorflow -n tensorflow</span><br><span class="line">az vm start -g tensorflow -n tensorflow</span><br></pre></td></tr></tbody></table></figure><p>Connect to the machine via SSH (type ‘yes’, if asked to continue):</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh tensorflow@$(az vm show -d -g tensorflow -n tensorflow --query "publicIps" --o tsv) -i ~/.ssh/tensorflow_id_rsa</span><br></pre></td></tr></tbody></table></figure><h2 id="Install-CUDA-8-0"><a href="#Install-CUDA-8-0" class="headerlink" title="Install CUDA 8.0"></a>Install CUDA 8.0</h2><p>Next, download <a href="http://www.nvidia.com/object/cuda_home_new.html" target="_blank" rel="noopener">CUDA</a>, make it known to apt-get and run install:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.nvidia.com/compute/cuda/8.0/prod/local_installers/cuda-repo-ubuntu1604-8-0-local_8.0.44-1_amd64-deb</span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu1604-8-0-local_8.0.44-1_amd64-deb</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y cuda</span><br><span class="line">rm cuda-repo-ubuntu1604-8-0-local_8.0.44-1_amd64-deb</span><br></pre></td></tr></tbody></table></figure><p>Now we can check the status of the GPU(s) by running <code>nvidia-smi</code>.</p><h2 id="Install-CuDNN-5-1"><a href="#Install-CuDNN-5-1" class="headerlink" title="Install CuDNN 5.1"></a>Install CuDNN 5.1</h2><p>Next, download and install <a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">cuDNN</a>…</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://developer.download.nvidia.com/compute/redist/cudnn/v5.1/cudnn-8.0-linux-x64-v5.1.tgz</span><br><span class="line">sudo tar -xzf cudnn-8.0-linux-x64-v5.1.tgz -C /usr/local</span><br><span class="line">rm cudnn-8.0-linux-x64-v5.1.tgz</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></tbody></table></figure><h2 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h2><p>…and add the following exports to <code>~/.bashrc</code>:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export CUDA_HOME=/usr/local/cuda-8.0</span><br><span class="line">export PATH=${CUDA_HOME}/bin:${PATH}</span><br><span class="line">export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}</span><br></pre></td></tr></tbody></table></figure><h2 id="Install-TensorFlow"><a href="#Install-TensorFlow" class="headerlink" title="Install TensorFlow"></a>Install TensorFlow</h2><p>The final step is to install Pip and the GPU version of TensorFlow:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y python-pip python-dev</span><br><span class="line">sudo pip install tensorflow-gpu</span><br></pre></td></tr></tbody></table></figure><p>We can now start a Python console and create a TensorFlow session:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; import tensorflow as tf</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; session = tf.Session()</span><br></pre></td></tr></tbody></table></figure><p>If everything went well, it will recognize the Tesla K80 GPU:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">I tensorflow/core/common_runtime/gpu/gpu_device.cc:885]</span><br><span class="line">Found device 0 with properties: </span><br><span class="line">name: Tesla K80</span><br><span class="line">major: 3 minor: 7 memoryClockRate (GHz) 0.8235</span><br><span class="line">pciBusID b0b5:00:00.0</span><br><span class="line">Total memory: 11.17GiB</span><br><span class="line">Free memory: 11.11GiB</span><br></pre></td></tr></tbody></table></figure><p>Remember to deallocate the VM when done to avoid using cycles:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm deallocate -g tensorflow -n tensorflow</span><br></pre></td></tr></tbody></table></figure><p>Once no longer needed, you can delete the virtual machine by running:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm delete -g tensorflow -n tensorflow</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Training neural networks (deep learning) is very compute-intensive. Fast GPUs can make those sessions, which sometimes
take hours, days or weeks go orders of magnitude faster. However, laptops usually don’t come with the fastest GPUs and having
to maintain a desktop machine only to occasionally run deep learning tasks is extra hassle.&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="https://uestc-msc.github.io/categories/AI/"/>
    
    
  </entry>
  
  <entry>
    <title>【谷哥的C/C++（2）】变量，数组，指针，结构体</title>
    <link href="https://uestc-msc.github.io/2017/09/26/%E3%80%90%E8%B0%B7%E5%93%A5%E7%9A%84C-C++%EF%BC%882%EF%BC%89%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E6%8C%87%E9%92%88%EF%BC%8C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>https://uestc-msc.github.io/2017/09/26/【谷哥的C-C++（2）】变量，数组，指针，结构体/</id>
    <published>2017-09-25T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.838Z</updated>
    
    <content type="html"><![CDATA[<p>逸霄说在前面的话：为了缓和谷哥的学习曲线，建议搭配《C Primer Plus》进行学习，同时我会搭配一些轻松愉快的小练习，供大家玩耍。本篇教程大概需要花费各位两个星期的时间进行完全的消化理解。</p><a id="more"></a><hr><p>久违的第二次C语言教程又要开始了~在这之前，我在第一期教程中带着大家弄出了第一个程序。然后给出了几个需要自学才能完成的题目。不知道大家有没有努力自学并且完成呢。如果你还没有开始自学，那么，在阅读以下内容之前，请保证对C语言的以下相关部分的了解：了解基本的变量类型（int ,char ,float ,double）的基本含义运算符的简单使用（加减乘除，取地址解引用，自增自减，逻辑判断）<strong>简单的语法（顺序，判断，循环结构）</strong>常用的函数的用法（printf , scanf）</p><p>这些内容的学习还是比较轻松的，通过书籍与在线文档/搜索引擎很快就能完成。</p><p>（来自逸霄的唠叨：我知道这可能有些难度，尤其是输入输出需要多加练习。在编程的初期，你可能会遇到很多各种各样的bug，可能是因为你还没有太熟悉C语言的编程模式。欢迎你在群里询问。）</p><p>为了确认你认真的阅读了第一期教程，我们来做个热身。</p><hr><p><strong>热身</strong></p><p>打开你喜欢的IDE或者文本编辑器，随手写一个打印九九乘法表的小程序出来，结果应该像这样：</p><p><img src="%E3%80%90%E8%B0%B7%E5%93%A5%E7%9A%84C-C++%EF%BC%882%EF%BC%89%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E6%8C%87%E9%92%88%EF%BC%8C%E7%BB%93%E6%9E%84%E4%BD%93/img_59c92684243f7.png" alt="img"></p><p>（逸霄的提示：首先你需要考虑一下怎么控制一样的宽度；然后你可能要写一个嵌套的for循环。如果你无法顺利完成这一步的话，意味着你还不能看第二讲，请使用一个星期的时间好好学习一下循环、条件这几大语法。这些并不难，只要好好写写小代码，就没有问题了。）</p><p>（逸霄的唠叨：关于解引用这一块，你只要明白，在变量前面加上&amp;号，就代表取地址，比如说<code>b=&amp;x;</code>就代表着b被赋值了x的地址。而反过来，<code>x</code>与<code>*b</code>是一样的，如果我们在地址/指针前面加上*号，那么指的就是一个对象。更多的消息请看这里：<a href="http://blog.csdn.net/synapse7/article/details/10260339）" target="_blank" rel="noopener">http://blog.csdn.net/synapse7/article/details/10260339）</a></p><p>如果你感觉上面的小程序太小儿科了，那真是太好了。我也并不想在验证你的水平上浪费太多时间。</p><p>本期的教程的主题是 变量，数组，指针，结构体。在我们的仅有的基础上讲解C语言的各种数据类型。接下来我们步入正题。</p><hr><p><strong>一，为什么要有那么多数据类型？</strong>刚刚当你打印九九乘法表的时候应该用了<strong>整型变量</strong>。遇到一些其他的计算问题，比如说计算商品折扣后的价格时又用了浮点类型。如果你仔细的想一想，发现用浮点类型计算只需要使用整数类型的变量时好像也没什么问题。那么C语言为什么要存在这么多数据类型?储存数字不是只需要一个浮点类型就好了吗？</p><p>（来自逸霄的唠叨：如果你写python，你会发现浮点类型被广泛应用；另外关于浮点类型的存储方式，可以参见IEEE 754标准。这将会在计算机组成原理中被系统地学到。二进制浮点数地存储并不是很精确，所以时常会出现微小的误差。）</p><p>各种不同的数据类型出现的根本原因在于，计算机的储存空间和计算能力并不是无穷无尽的。如果你是一个单机游戏爱好者，肯定会知道，许多大型游戏需要计算机的内存，CPU，显卡等达到一定标准才能玩。如果你是更高级的游戏发烧友，可能还会听说什么游戏优化做的好，什么游戏特别烧显卡等。其实这就和我们今天要讲的话题有很大关系。</p><p>深入的了解计算机底层的知识，你会了解，整数运算的速度和浮点运算的速度不相同。整数与浮点类型占用的内存空间也是不相等的。我们不讨论计算机计算能力的无聊话题。变量所占用的内存空间可以通过C语言中一个看起来像函数的运算符sizeof求出，大概像这样：</p><p><img src="%E3%80%90%E8%B0%B7%E5%93%A5%E7%9A%84C-C++%EF%BC%882%EF%BC%89%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E6%8C%87%E9%92%88%EF%BC%8C%E7%BB%93%E6%9E%84%E4%BD%93/img_59c929349e339.png" alt="img"></p><p>亲自动手看看，sizeof会输出类型占用的字节长度值得一提的是，C语言中除了char这个最小的类型之外，类型的字节长度并不是一定的，这与使用的编译器以及平台有关。具体的原因在这里我们不做讨论，其实在一些底层的技术，以及开发平台无关的应用上了解这些还是相当重要的。但是这不是我们今天的主菜。</p><p>如果你需要做OJ，或者说为了考试，多上网了解一些这方面的知识。</p><hr><p><strong>二，数组</strong>数组简单的讲就是许多同类型的变量放在一起。比如一个程序需要储存一个名字，这就需要一个字符数组。<code>char ch='G';</code><code>char name[]="GYQ";</code></p><p>（来自逸霄的唠叨：在一些特殊的情况下，你也可能看到数组的元素是数组，这种情况在C#中被称为交错数组。）<strong>关于数组的初始化，赋值操作可以去看看书，文档，查查百度。</strong></p><p>（来自逸霄的唠叨：这一块请务必不要跳过。关掉博文，去看一看书吧！）值得注意的是字符串的末尾有一个<strong>看不见的终止符</strong>。字符串”GYQ”由’G’，’Y’，’Q’，’\0’四个字符串组成，’\0’是空字符。没有了解的同学迅速去百度一波。</p><p>（来自逸霄的唠叨：也许你之前已经看过了类似\n, \r这样的表示方法，这些叫做转义字符。转义字符一般在你的C语言书中会有一个比较完整的表格，一般情况下只需要使用\n, \t这两种。如果你使用的教材是《现代方法》，你就会发现转义字符，编者是慢慢介绍的。）</p><p>（事实上，每一串字符串，背后都会接一个空字符，代表这个字串已经结束了。更多的讨论请看这里：<a href="http://blog.csdn.net/supreme42/article/details/7300451，如果你不明白，请**不要跳过**这一段。）" target="_blank" rel="noopener">http://blog.csdn.net/supreme42/article/details/7300451，如果你不明白，请**不要跳过**这一段。）</a></p><p>数组还有维数这个说法。比如说，你在做线性代数的…呸。。。我们换一个轻松的话题。你在做一个贪吃蛇的小游戏，需要用一个变量来储存画面，最可能的就是一个二维的字符数组了。</p><p>所有的多维数组都能转化为一维数组<code>int a[3][3]={</code><code>{1,2,3},</code><code>{4,5,6},</code><code>{7,8,9}</code><code>};</code><code>int b[9]={1,2,3,4,5,6,7,8,9};</code></p><p>（横向存储的二维数组）转化方式就像上面那样，实际上多维数组与一维数组在计算机上的储存方式是一样的，也就是说上面那两个数组里面的数据的储存方式完全一致，多维数组的使用完全是为了<strong>更简单的逻辑表达</strong>。比如说我上面提到的贪吃蛇小游戏，用二维数组储存地图可以方便的使用两个索引值表示几行几列：<code>map[5][3];//第6行4列</code>如果是一维数组：<code>map[5*LINEWIDTH+3]//看起来就像这样</code></p><p>关于数组的一些复杂语法在文末附有博客。</p><p>（逸霄的唠叨：如果学完这些你感觉有些吃力的话，你可以试试看在二维数组上嵌套for循环，来锻炼自己的能力。接下来是一个小小的练习：）</p><hr><p><strong>逸霄的小练习</strong></p><p>请你设计一个井字棋游戏。井字棋可能长这样：</p><p><img src="%E3%80%90%E8%B0%B7%E5%93%A5%E7%9A%84C-C++%EF%BC%882%EF%BC%89%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E6%8C%87%E9%92%88%EF%BC%8C%E7%BB%93%E6%9E%84%E4%BD%93/img_59c92db451200.png" alt="img"></p><p>要点：正确使用二维数组打印棋盘；判断胜利条件。</p><p>这个程序可能需要你一至两小时完成，并花费一下午的时间进行debug。但是一旦完成了这个训练，你将会明白之前学的那些东西如何贯穿到一起来。</p><hr><p><strong>三，指针</strong>许多人都说指针是C语言里面最难学的地方，因为指针运算牵扯到太多的知识。就考试而言的确如此。但实际上，普通的指针应用并不是十分复杂。对于一个仅仅使用C/C++进行软件开发的人，因为有各种方便的东西可以使用。也许他所用到的东西就只有这个：<code>/*C*/</code><code>SomeType *a=(SomeType*)malloc(sizeof(SomeType));</code><code>a-&gt;dosomething();</code><code>...</code><code>/*C++*/</code><code>SomeType *a=new SomeType();</code><code>a-&gt;dosomething();</code><code>...</code></p><p>以上就是为一个类(结构)进行动态内存分配声明一个实例。注：malloc是C语言用于动态内存分配的函数，参数是类型的字节长，可以直接使用sizeof运算符计算。有关指针运算的部分，在实际应用中，大多可以使用数组下标的方法代替。</p><p>当然指针的用处并不只有这个指针是C语言中极其精髓的东西，关于指针的使用，运算规则可以查阅书籍，自行百度。</p><p>参考网站：<a href="http://www.runoob.com/cprogramming/c-pointers.html" target="_blank" rel="noopener">http://www.runoob.com/cprogramming/c-pointers.html</a></p><p>（来自逸霄的唠叨：指针是一个庞杂的话题。在《现代方法》中，有关指针的话题聊了整整两章。我们也无法在线上课程里详细地说明，但是我们可以进行一些针对性的提点。希望你在阅读下面的模块前，已经看过了教材对应的部分。你可能一时间弄不懂全部。没关系，之后我们用得多了自然就会熟练的。）</p><hr><p><strong>逸霄的Tips：</strong></p><p>1，<strong>指针</strong>是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。</p><p>2，使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 ***** 来返回位于操作数所指定地址的变量的值。</p><p>3，在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。</p><p>4，我们喜欢在程序中使用指针代替数组，因为变量指针可以递增，而数组不能递增，因为<strong>数组是一个常量指针</strong>。（实际上如果你尝试着将数组名当作指针使用，你会发现数组名指向了数组的第一个元素。）</p><hr><p><strong>逸霄的Tips：</strong></p><p>为什么说指针是C语言的精髓？（<a href="https://www.zhihu.com/question/20125963）" target="_blank" rel="noopener">https://www.zhihu.com/question/20125963）</a></p><p>除去知乎dalao们回答的这些以外，我想特意指出的是，C语言是一门强大的语言，但也是一门很精炼（简陋）的语言。它没有繁多的语法糖，如同一把中国厨刀，什么都能做。与之相比，C#、Java更像是厨师机，而Python更像是一套厨刀。拥有了很多绝妙的语言特性之后，指针的存在感将会被弱化。但是不得不说，指针的使用充满了技巧。</p><hr><p><strong>四，指针与数组</strong>指针与数组的复合运算，以及语法基本上算是C语言考试题中最高难度的东西了。这里推荐几篇博客：指针数组与数组指针：<a href="http://www.cnblogs.com/Romi/archive/2012/01/10/2317898.html" target="_blank" rel="noopener">http://www.cnblogs.com/Romi/archive/2012/01/10/2317898.html</a>二维数组和指针：<a href="http://blog.csdn.net/iu_81/article/details/1782642" target="_blank" rel="noopener">http://blog.csdn.net/iu_81/article/details/1782642</a></p><hr><p><strong>逸霄的Tips：</strong></p><p>整个一套学下来，你可能对C的整体有了一些把握。指针需要学通是一件长期而艰苦的事情，很多人一直学不会，于是便有了其他语言（比如C++实际上削弱了指针）。如果你实在无法熟练操作指针，没关系，至少概念要明白——我们为什么需要指针，指针的工作原理是什么，我们可以透过指针做些什么。</p><hr><p><strong>五，结构体</strong></p><p>因为出现事故，这里贴个博客：<a href="http://blog.csdn.net/huqinwei987/article/details/23625823" target="_blank" rel="noopener">http://blog.csdn.net/huqinwei987/article/details/23625823</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逸霄说在前面的话：为了缓和谷哥的学习曲线，建议搭配《C Primer Plus》进行学习，同时我会搭配一些轻松愉快的小练习，供大家玩耍。本篇教程大概需要花费各位两个星期的时间进行完全的消化理解。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://uestc-msc.github.io/categories/C-C/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
      <category term="谷亚奇" scheme="https://uestc-msc.github.io/tags/%E8%B0%B7%E4%BA%9A%E5%A5%87/"/>
    
  </entry>
  
  <entry>
    <title>【给萌新们的Python】理解输入和输出</title>
    <link href="https://uestc-msc.github.io/2017/09/23/%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <id>https://uestc-msc.github.io/2017/09/23/【给萌新们的Python】理解输入和输出/</id>
    <published>2017-09-22T19:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.834Z</updated>
    
    <content type="html"><![CDATA[<p>回到之前那个Hello World程序来。</p><p>如果我们使用文本编辑器（如Spyder，Atom，VS Code，Sublime）编写程序，那么这个程序要怎么运行的好呢？</p><a id="more"></a><p>我们首先编写一个这样的程序。打开Visual Studio Code，首先安装python插件，这个插件可以很好地帮助我们写Python代码。</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c6228bbd16e.png" alt="img"></p><p>之后我们ctrl+N新建一个文件，编写代码，按下ctrl+S，以python文件形式保存。</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c622e1ace96.png" alt="img"></p><p>于是我们得到了hello.py.</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c622f62669a.png" alt="img"></p><p>之后打开cmd，这样运行程序。</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c6231c1e48b.png" alt="img"></p><p>执行的指令是：python hello.py</p><hr><p>回到正题，在这个程序里面，什么是输入，什么是输出？</p><p>在console里，我们使用了print()函数，括号里面的是输入，返回的值就是输出。</p><p>现在我们尝试一个这样的代码：</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c623d43d7dd.png" alt="img"></p><p>理所当然地，它会返回300.在这里的输入是100+200，而输出是300.当然print()函数接受多个输入，只要加入逗号就可以了：</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c6243eedf7e.png" alt="img"></p><p>我们再看另外一个函数，input()。input()是最典型的输入函数。现在我么认识一个符号：   =</p><p>=可以将=右边的值赋值到=左边去。比如：x=300，这样你就将300赋值到了x上。</p><p>接下来我们尝试这么做：</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c624c51ba8a.png" alt="img"></p><p>我们成功地完成了一次输入。input里面可以填写参数，比如：</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c624f3b98d8.png" alt="img"></p><p>显示出了一些与输入有关的提示符。</p><p>接下来，我们将输入输出函数组合成一个程序：</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c6260ce9b01.png" alt="img"></p><p>\n是换行符，请将它放进字符串里，因为\n本身是一个和单词一样的特殊字符。</p><p><img src="%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%90%86%E8%A7%A3%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/img_59c6259ce3b19.png" alt="img"></p><p>这样，我们终于写出了一个与用户可以交互的程序了。</p><hr><p>tips：sss</p><p>1，eval()函数代表，执行括号里面的句子。比如说eval(2<em>300)，会返回这个算术的值。*</em>你可以用这个函数，一行代码写一个计算器。**</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回到之前那个Hello World程序来。&lt;/p&gt;
&lt;p&gt;如果我们使用文本编辑器（如Spyder，Atom，VS Code，Sublime）编写程序，那么这个程序要怎么运行的好呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://uestc-msc.github.io/categories/Python/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
  </entry>
  
  <entry>
    <title>【给萌新们的Python】相关环境，以及Python的hello world</title>
    <link href="https://uestc-msc.github.io/2017/09/23/%E3%80%90%E7%BB%99%E8%90%8C%E6%96%B0%E4%BB%AC%E7%9A%84Python%E3%80%91%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%EF%BC%8C%E4%BB%A5%E5%8F%8APython%E7%9A%84hello%20world/"/>
    <id>https://uestc-msc.github.io/2017/09/23/【给萌新们的Python】相关环境，以及Python的hello world/</id>
    <published>2017-09-22T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.834Z</updated>
    
    <content type="html"><![CDATA[<p>各位萌新们大家好啊！这里是划水主席逸霄。根据我们之前约定的培养计划，我现在要写第一课了。</p><a id="more"></a><hr><p><strong>Python是一门怎样的语言？</strong></p><p>Python是一门非常流行的解释型高级语言。现在，全世界差不多有600多种编程语言，但流行的编程语言也就那么20来种。如果你听说过TIOBE排行榜，你就能知道编程语言的大致流行程度。</p><p>总的来说，这几种编程语言各有千秋。C语言是可以用来编写操作系统的贴近硬件的语言，所以，C语言适合开发那些追求运行速度、充分发挥硬件性能的程序。而Python是用来编写应用程序的高级编程语言。</p><p>当你用一种语言开始作真正的软件开发时，你除了编写代码外，还需要很多基本的已经写好的现成的东西，来帮助你加快开发进度。比如说，要编写一个电子邮件客户端，如果先从最底层开始编写网络协议相关的代码，那估计一年半载也开发不出来。高级编程语言通常都会提供一个比较完善的基础代码库，让你能直接调用，比如，针对电子邮件协议的SMTP库，针对桌面环境的GUI库，在这些已有的代码库的基础上开发，一个电子邮件客户端几天就能开发出来。</p><p>Python就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。</p><p>除了内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。</p><p>Python的主要优点是：简单、适合快速开发。</p><p>Python的主要缺点是：慢、保密性差。</p><p>有关Python的介绍，请看廖雪峰的相关文章：<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431608990315a01b575e2ab041168ff0df194698afac000" target="_blank" rel="noopener">Python简介</a></p><p>![img](【给萌新们的Python】相关环境，以及Python的hello world/img_59c5fd4232272.png)</p><hr><p><strong>如何安装Python呢？</strong></p><p>首先这里默认你使用了Windows系统。我们首先打开Python官网：<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p><p>之后找到32位或者64位的版本进行下载就好了。注意关于Python的版本号选择，因为Python3已经具有广泛的应用，是Python的现在和未来。所以本教程将会立足于Python3来进行讲述。请各位下载Python3的最新版本：Python 3.6.2.</p><p>![img](【给萌新们的Python】相关环境，以及Python的hello world/img_59c5fd5a9625c.png)</p><p>在安装的时候，请勾选：Add Python to path这一项，即将Python加入到环境变量。当然之后手动操作也是没问题的。这样配置的好处是，你可以直接在cmd，Powershell里启用Python.</p><p>当我们编写Python代码时，我们得到的是一个包含Python代码的以<code>.py</code>为扩展名的文本文件。要运行代码，就需要Python解释器去执行<code>.py</code>文件。</p><p>由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p><p>当然我们也可以选择更加集成的环境，即使用IDE。</p><p><strong>集成开发环境</strong>（Integrated Development Environment，简称<strong>IDE</strong>，也称为Integration Design Environment、Integration Debugging Environment）是一种辅助程序开发人员开发<a href="https://zh.wikipedia.org/wiki/軟體" target="_blank" rel="noopener">软件</a>的<a href="https://zh.wikipedia.org/wiki/應用軟體" target="_blank" rel="noopener">应用软件</a>，在开发工具内部就可以辅助编写源代码文本、并编译打包成为可用的程序，有些甚至可以设计图形接口。</p><p>IDE通常包括<a href="https://zh.wikipedia.org/wiki/文本编辑器" target="_blank" rel="noopener">编程语言编辑器</a>、<a href="https://zh.wikipedia.org/wiki/自动构建" target="_blank" rel="noopener">自动构建</a>工具、通常还包括<a href="https://zh.wikipedia.org/wiki/除錯器" target="_blank" rel="noopener">调试器</a>。有些IDE包含<a href="https://zh.wikipedia.org/wiki/編譯器" target="_blank" rel="noopener">编译器</a>／<a href="https://zh.wikipedia.org/wiki/直譯器" target="_blank" rel="noopener">解释器</a>，如微软的<a href="https://zh.wikipedia.org/wiki/Microsoft_Visual_Studio" target="_blank" rel="noopener">Microsoft Visual Studio</a>，有些则不包含，如<a href="https://zh.wikipedia.org/wiki/Eclipse" target="_blank" rel="noopener">Eclipse</a>、<a href="https://zh.wikipedia.org/wiki/SharpDevelop" target="_blank" rel="noopener">SharpDevelop</a>等，这些IDE是通过调用第三方编译器来实现代码的编译工作的。</p><p>这里推荐两种IDE。</p><p>1，Anaconda 4.4 这也是我正在使用的IDE，集成了IPython，Jupyter Notebook，Spyder，以及会为你预先安装好数量丰富的第三方库。一般来说，数据分析、机器学习领域的程序员会非常喜欢Anaconda。conda还提供了一个指令来替代pip，从而实现灵活的包管理，并且可以灵活的使Python多版本共存。Anaconda下载地址：<a href="https://anaconda.org/" target="_blank" rel="noopener">https://anaconda.org/</a></p><p>当然对于Anaconda来说你也可以先装Anaconda再在里面装Python。同样，建议把Anaconda加入环境变量 add anaconda to PATH。</p><p>![img](【给萌新们的Python】相关环境，以及Python的hello world/img_59c6003967ecf.png)</p><p>这是Anaconda Navigator的一个界面，右边是集成好了的常用Python库。个人非常推荐使用Anaconda。<strong>注意：在进行包管理的时候，Anaconda通常会加入清华的源。</strong></p><p>2,PyCharm，专业Python IDE，饱受好评，JetBrains出品必属精品，非常适合专业开发。其专业版可以通过UESTC的学生邮箱来获得。请使用学生邮箱注册账号，获得免费的专业版。下载地址：<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/</a></p><hr><p>接下来我推荐一个美化插件：ConEmu，提供了一个cmd和powershell的更好看的前端：<a href="https://conemu.github.io/" target="_blank" rel="noopener">https://conemu.github.io/</a></p><p>默认启动界面请选择cmd（Admin），相对来说比较好用。当然powershell（Admin）也是没问题的。</p><p>之后，我们开始我们的第一次编程。</p><hr><p><strong>Hello World！</strong></p><p>打开ConEmu：</p><p>![img](【给萌新们的Python】相关环境，以及Python的hello world/img_59c6025937868.png)</p><p>输入<code>python</code>.</p><p>![img](【给萌新们的Python】相关环境，以及Python的hello world/img_59c602e400422.png)然后输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print("Hello World!")</span><br></pre></td></tr></tbody></table></figure><p>![img](【给萌新们的Python】相关环境，以及Python的hello world/img_59c603390b208.png)</p><p>如果一切正常，你将看到Hello World！从现在开始，你已经正式迈向了Python开发者的道路。</p><p>Tips：</p><p>1，Python3的print()是函数，而Python2的print 是指令。</p><p>2，Python解释器是逐行解释的，不会预先编译。</p><p>3，Python不区分单引号”和双引号””。</p><hr><p><strong>有什么参考书推荐吗？</strong></p><p>1，《Learn Python The Hard Way》，注意购买Python3版本。</p><p>2，《Python核心编程（第2版）》《Python基础教程（第2版·修订版）》</p><p>3，廖雪峰的Python3教程</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各位萌新们大家好啊！这里是划水主席逸霄。根据我们之前约定的培养计划，我现在要写第一课了。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://uestc-msc.github.io/categories/Python/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
  </entry>
  
  <entry>
    <title>【MSC-2017企划】俱乐部会做什么活动呢？</title>
    <link href="https://uestc-msc.github.io/2017/09/21/%E3%80%90MSC-2017%E4%BC%81%E5%88%92%E3%80%91%E4%BF%B1%E4%B9%90%E9%83%A8%E4%BC%9A%E5%81%9A%E4%BB%80%E4%B9%88%E6%B4%BB%E5%8A%A8%E5%91%A2%EF%BC%9F/"/>
    <id>https://uestc-msc.github.io/2017/09/21/【MSC-2017企划】俱乐部会做什么活动呢？/</id>
    <published>2017-09-20T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.834Z</updated>
    
    <content type="html"><![CDATA[<p>微软学生俱乐部是是一个偏技术类的组织，兼顾了各个有趣的方向。</p><p>经费由MSRA直接提供，所以加入俱乐部是<strong>免费</strong>的，而且俱乐部承诺<strong>不会收钱</strong>。</p><a id="more"></a><hr><p><strong>对于0基础的萌新</strong></p><p><strong>1，新人技术培养计划</strong></p><p>-C/C++方向（推荐给完全<strong>0基础</strong>的萌新，0基础到熟练玩耍C++）</p><p>-C#方向（从0基础到Windows应用开发者）</p><p>-Python方向（从0基础到Python玩家）</p><p><strong>Q：时间安排呢？</strong></p><p>A：我们的技术培养会将主要精力放在线上，同时会有定期的线下讨论会。萌新可以选择自己方便的时候参与。</p><p><strong>2，学术沙龙</strong></p><p>-一起看看科技圈的最新消息，欢迎广大软粉参加讨论</p><p>-一小时科普活动，一小时入门计算机前沿领域</p><p><strong>Q：什么是前沿领域？</strong></p><p>A：比如机器学习，Web开发，网络安全之类的~</p><p><strong>3，图书奖学金计划</strong></p><p>俱乐部成员可向俱乐部申请图书奖学金，用与学习某项计算机相关专业技术。当申请者认真读完该书，并且通过写博客或者开小型talk来证明已学到该书的知识之后，俱乐部将为其报销购书款项。由于事先我们签署过协议，这使得申请者更容易坚持把书认真读完，而不易半途而废。我们想达到的目的是激励俱乐成员进行学习，并且学有所成。</p><hr><p><strong>一些特别的活动</strong></p><p><strong>1，11月份，Hackathon</strong></p><p>这是一场48小时的头脑风暴，俱乐部成员可以自由组队，参与黑客马拉松的思想热潮中。微软提供官方API和云计算平台，参赛队拥有专门的场地（可以通宵），享受俱乐部提供的餐食、小吃、饮料，享受开发的过程。参赛者可获得微软纪念T恤（视情况发放限定版）和奖金。</p><p><strong>2，12月份，创新杯&amp;微软校园菁英计划</strong></p><p>俱乐部将会展开宣传，组队报名参加微软创新杯。同时项目进入微软校园菁英计划，赢取去往MSRA夏令营的资格。</p><p><strong>3，5月份，微软“编程之美”</strong></p><p>俱乐部承担了编程之美比赛的宣传，也会组队进行比赛，领略微软的最新科技。</p><hr><p><strong>俱乐部内部的长期活动呢？</strong></p><p>俱乐部内部会有各个方向的讨论小组，今年已经定下来的小组有：</p><p>-人工智能与机器学习小组</p><p>其他方向的小组正在筹划中。讨论小组目前决定采取定期线下碰头的形式，交流学术圈、科研圈的内容，同时会承担这个方向的入门任务。</p><hr><p><strong>还可以玩什么？</strong></p><p><strong>1，12月份，编程一小时活动</strong></p><p>我们将会和周边的中小学进行互动，走进课堂，用有趣的方式（比如微软提供编程小游戏）给小朋友一堂编程入门课。完成活动者可以获得证书。</p><p><strong>2，PPT脑洞大赛（在筹）</strong></p><p><strong>3，成都软粉聚会（不定期）</strong></p><hr><p><strong>福利</strong></p><p><strong>1，微软学生夏令营</strong></p><p>每年8月份，俱乐部可以推选优秀部员免费去MSRA参与为期一周的夏令营。</p><p>查看往届部员的想法：</p><p><a href="https://www.zhihu.com/question/31743851" target="_blank" rel="noopener">https://www.zhihu.com/question/31743851</a></p><p><a href="http://chuansong.me/n/2250686" target="_blank" rel="noopener">http://chuansong.me/n/2250686</a></p><p><strong>2，在日常活动和年会上赢取微软纪念品</strong></p><p>-活动限定T恤</p><p>-以及一系列神奇的礼物</p><p><strong>3，加入MSP计划，赢取价值6W元的Visual Studio订阅</strong></p><p>详见：<a href="https://msdn.microsoft.com/en-us/microsoftstudentpartners.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/microsoftstudentpartners.aspx</a></p><p>俱乐部成员在申请MSP时将占巨大优势。电子科技大学这几年一共诞生了超过十名MSP。 微软校园精英面向全球，不仅仅是计算机专业的学生，推广他的学生项目，让当代学生站在科技的前沿，领略科技的魅力，更希望他们能于其中，利用微软的技术，一起去改善生活，改变世界。无论是微软亚洲研究院下30多所高校的微软学生俱乐部，亦或者是全球范围内的Microsoft Student Partner。 加入MSP，你将获得更加开阔的眼界、认识来自全国乃至各高校的优秀同龄人、还有每年价值上万美元的MSDN订阅。</p><p>================================</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微软学生俱乐部是是一个偏技术类的组织，兼顾了各个有趣的方向。&lt;/p&gt;
&lt;p&gt;经费由MSRA直接提供，所以加入俱乐部是&lt;strong&gt;免费&lt;/strong&gt;的，而且俱乐部承诺&lt;strong&gt;不会收钱&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="管理层公告" scheme="https://uestc-msc.github.io/categories/%E7%AE%A1%E7%90%86%E5%B1%82%E5%85%AC%E5%91%8A/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
  </entry>
  
  <entry>
    <title>【谷哥的新人技术培养计划】从最简单的开始</title>
    <link href="https://uestc-msc.github.io/2017/07/28/%E3%80%90%E8%B0%B7%E5%93%A5%E7%9A%84%E6%96%B0%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%9F%B9%E5%85%BB%E8%AE%A1%E5%88%92%E3%80%91%E4%BB%8E%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://uestc-msc.github.io/2017/07/28/【谷哥的新人技术培养计划】从最简单的开始/</id>
    <published>2017-07-27T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.834Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于现在是假期，大家的时间比较好安排。所以大家比较可能会有时间<strong>系统地看书</strong>或者教程。教程从零到编写出第一个程序，方便大家自行安排学习。本次的作业是引导性的，需要学习了知识才能完成。希望大家在假期劳逸结合，学有所得，玩得开心！</p><a id="more"></a><h4 id="C语言的前世今生"><a href="#C语言的前世今生" class="headerlink" title="C语言的前世今生"></a>C语言的前世今生</h4><blockquote><p>C是一种通用的编程语言，广泛用于系统软件与应用软件的开发。于1969年至1973年间，为了移植与开发UNIX操作系统，由丹尼斯·里奇与肯·汤普逊，以B语言为基础，在贝尔实验室设计、开发出来。C语言具有高效、灵活、功能丰富、表达力强和较高的可移植性等特点，在程序员中备受青睐，成为最近25年使用最为广泛的编程语言。目前，C语言编译器普遍存在于各种不同的操作系统中，例如Microsoft Windows, Mac OS X, Linux, Unix等。C语言的设计<strong>影响了众多后来的编程语言</strong>，例如C++、Objective-C、Java、C#等。二十世纪八十年代，为了避免各开发厂商用的C语言语法产生差异，由美国国家标准局为C语言订定了一套<strong>完整的国际标准语法</strong>，称为ANSI C，作为C语言的标准。二十世纪八十年代至今的有关程序开发工具，一般都支持匹配ANSI C的语法。–摘自 维基百科</p></blockquote><h4 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h4><p><strong>编程语言</strong>：编写计算机程序的语言<strong>系统软件、应用软件</strong>：粗略的理解，系统软件指较为底层的软件，应用软件是面向使用者的软件<strong>操作系统</strong>：粗略的理解，操作系统是像Windows、Mac OS这样不同的平台。实际上操作系统也是一种程序，它负责管理各种计算机硬件与软件资源，是计算机系统的基石。<strong>B语言</strong>：一种被遗弃的编程语言，C语言的前身<strong>软件的可移植性</strong>：软件的移植指一个软件从一个平台迁移到另一个平台，比如一个手游从安卓系统迁移到苹果的IOS系统<strong>编译器</strong>：编译器是把程序代码转化成计算机程序的组件中的一个</p><h4 id="为什么学习C语言？"><a href="#为什么学习C语言？" class="headerlink" title="为什么学习C语言？"></a>为什么学习C语言？</h4><p><a href="http://c.biancheng.net/cpp/html/2709.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/2709.html</a></p><p>张逸霄注：我认为，C语言在现在固然有它的不足，在设计上也有些繁琐。在实际的工业界，C语言不是一门特别常用的语言。与之相对的，Python作为一门新生语言，拥有自己的灵活特性，的确很引人注目，而且的确很好学。</p><p>但是重点在于，语言越上层，你就看不到越底层的东西。如果你不学习C，你的编程思想会<strong>受到一些限制</strong>，你就可能被囚禁在高等语言的笼子里了。</p><p>第二个原因是，现在又很多主流语言，比如Java，C#，这些语言都是由C语言延伸过来的，C语言可以说是这些主流语言的<strong>简化版</strong>。当你将C语言学通了，再来看这些语言，你将会觉得它们好学得多。</p><p>另外，C语言的<strong>学习周期不长</strong>，一般来说一两个月你就能进入到中等水平，此时你就可以考虑学习C++了。</p><h4 id="关于在线编程、WebIDE"><a href="#关于在线编程、WebIDE" class="headerlink" title="关于在线编程、WebIDE"></a>关于在线编程、WebIDE</h4><p>在线编程是为了方便学习与展示而发展出来的一种形式，由于为了安全起见，在线编程会有诸多限制，有的在线编程网站不支持输入，比如runoob的在线编辑器。</p><h4 id="关于“Hello-World”"><a href="#关于“Hello-World”" class="headerlink" title="关于“Hello World”"></a>关于“Hello World”</h4><p>当新手开始学习、程序员使用一门新的编程语言时，编写的第一个程序通常是输出一行【hello, world】。一般来说，这是每一种计算机编程语言中最基本、最简单的程序，通常也会作为一般的编程语言教程的第一个程序。这个传统产生于贝尔实验室的技术文档中，后来广为流传，沿用至今。</p><p>张逸霄注：当然，某本著名的C语言书里使用的就是：“to C or not to C,  that is a question.”</p><h4 id="Hello-World代码分析"><a href="#Hello-World代码分析" class="headerlink" title="Hello World代码分析"></a>Hello World代码分析</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">前置说明：程序代码中，<span class="comment">/**/</span>里面的内容是注释，是用来解释程序功能的文字解释</span><br><span class="line">，不会改变程序的行为。</span><br><span class="line"><span class="comment">//在一行中，双斜杠后面的代码也是注释</span></span><br><span class="line">-----</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">/* 我的第一个 C 程序 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World! \n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="顺序说明"><a href="#顺序说明" class="headerlink" title="顺序说明"></a>顺序说明</h4><p>1.#include用来使用一个库中的功能stdio是C语言标准输入输出库下文的printf就是包含于这个库的。这一行代码表示程序使用C语言标准输入输出库中的内容也是大多数C语言程序都有的一行</p><p>2.空行没有任何作用，目的是使程序代码结构更清晰下面的缩进（每行代码前面相同数量的空格）作用也是如此</p><p>3.main()，主函数。是C语言程序开始的地方，跟随的一对花括号{}中的内容才是程序的主体。</p><p>4./**/里面是解释性文本</p><p>5.printf是C语言中输出内容最常用的函数，括号中的内容是要输出的东西。结尾的分号代表一条C语言语句的结束</p><p>6.return是返回的意思，通常代表一个过程的结束。return 0;是使程序结束的标准做法。</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>1.首先要说明的是，这个程序的主体只有printf(“Hello, World! \n”);一行代码，其余的部分是大多数C语言程序使用的固定格式。对于一个C语言程序，引入一个库的内容，写出程序入口是必要的。#号开头的一行代码（#include &lt;stdio.h&gt;）叫做预编译指令，预编译指令不是编程的主体，它控制编译器的行为。比如说这行指令告诉编译器，程序使用stdio.h库中的内容，如果不加这一行，那么printf函数是无法使用的，编译程序时会出现错误以上是include指令的使用，关于更多预编译指令的知识将在以后介绍</p><p>2.主函数main()前面的int在C语言中表示小整数（当然还有大整数，比如long和long long）函数前面的类型名称，表示的是函数返回的值，与结尾的return 0;相对应用int标记主函数的返回值类型，return 0;来结束程序是C语言程序的规范，事实上还存在其他写法，这里不做介绍。</p><p>张逸霄注：关于C语言的更多细节，可以参见两本著名的教材：《C Primer Plus（第六版 中文版）》以及《C语言程序设计现代方法》。前者是世界著名教材，后者是信软学院使用的教材，非常好用。</p><p>张逸霄注：另外，可以参见知乎链接：<a href="https://www.zhihu.com/question/37304655/answer/71527606" target="_blank" rel="noopener">为什么学习C语言？</a></p><h4 id="在电脑中安装C语言集成开发环境-IDE"><a href="#在电脑中安装C语言集成开发环境-IDE" class="headerlink" title="在电脑中安装C语言集成开发环境(IDE)"></a>在电脑中安装C语言集成开发环境(IDE)</h4><p>Dev C++安装教程：<a href="https://jingyan.baidu.com/article/948f5924014f72d80ff5f908.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/948f5924014f72d80ff5f908.html</a>顺便提一下，这个教程与实际操作的有些出入纯属正常，因为可能你使用的版本不一样。推荐使用英文的程序环境，中文也可以。后面的说明以英文为例</p><p><strong>张逸霄注：当然你也可以使用Visual Studio 2017，相关配置方法参见知乎链接：怎么用Visual Studio写C语言？</strong></p><h4 id="编写属于你自己的第一个程序"><a href="#编写属于你自己的第一个程序" class="headerlink" title="编写属于你自己的第一个程序"></a>编写属于你自己的第一个程序</h4><p>打开Dev c++，从顶部的菜单栏中的File&gt;New&gt;Project…新建一个工程工程类型Basic&gt;Empty Project&gt;C Project项目名改为helloworld，点击下一步。这里的项目名可以理解为程序的名字选择一个空的文件夹来容纳项目，免得把电脑弄得乱七八糟</p><p>项目建立成功后会自动新建一个文件，亲手把一下内容输入：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>提示：缩进可以用键盘最左边的Tab键输入，Dev c++也有自动缩进、自动补全的功能（亲手写了上面的程序肯定能理解是什么意思）</p><p>写完按Ctrl+S保存文件，在相同的目录下保存刚刚写的代码，名字可以随便起。命名为main.c是标准的做法。按F9编译并且执行程序。（F9是上部工具栏中某个图标的快捷键，你可以去找一找）</p><p>等待一小会，弹出一个黑色窗体，里面有白色文字：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello, world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process exited normally.</span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></tbody></table></figure><p>你的第一个程序至此运行完毕。</p><h4 id="相关解释"><a href="#相关解释" class="headerlink" title="相关解释"></a>相关解释</h4><p>1.Dev c++是C语言和C++的IDE（集成开发环境）2.Dev c++最顶部的文字菜单叫菜单栏（Menu Bar），菜单中有Dev c++的功能与设置有图标的一条叫做工具栏（Tool Bar），工具栏上面是程序最常用的功能其他部分请自行摸索。</p><p>如果要在关闭Dev c++后，再次打开之前的项目：菜单栏中File&gt;Open…找到之前保存项目的文件夹，打开名字为【项目名称.dev】的文件即可(这次是helloworld.dev)—</p><p>注：上面的教程只是介绍了C语言，带你编写了第一个C语言程序。作业的难度不是很大，请查阅相关资料后完成。</p><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p>1.程序示例：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input two number,divided with a space:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The sum of them is:%d\n"</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个程序展示了printf，scanf这两个函数的通常用法。请在runoob、C语言中文网、《C Primer Plus》或者在百度上上查阅变量，语句，操作符，转义字符，printf，scanf的知识来理解上面的程序。上面程序的功能是输入两个数字，输出它们的和。并且在运行的时候对用户要进行什么操作给予了提示，对输出做了说明，这是个好习惯。1)编写一个程序，输入三个数字，输出他们的积。例如：输入了2.5 3 4，输出30注意上面的数字是小数，不能用int储存</p><p>2)编写一个程序，输入三个数字，倒序输出他们。例如：输入了2 3 4，输出4 3 2</p><p>—（下面的两个并不是很简单哦）3)编写一个程序，输入一个英文的名字，输出打招呼。例如：输入Henry，输出Hello, Henry.</p><p>4)编写一个程序，输入一个一元二次方程的三个参数，输出两个根（假设有实根）。</p><p>张逸霄注：使用Visual Sudio写程序的时候，会有一个安全警告提示你：scanf()并不安全，你可以自行搜索解决办法，简而言之就是调整Visual Studio的安全等级。</p><p>2.程序实例：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Give me some money for my lunch:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">50</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You are too mean!"</span>);</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(a&lt;=<span class="number">100</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Thank you!"</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I like you so much!"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的程序是展示了分支型控制流的基本用法请在runoob、C语言中文网、《c primer plus》或者在百度上上查阅关于if语句的知识来理解上面的程序。并且了解while,do while,for,break,continue等关键字的用法。</p><p>1)写一个能一直计算两个数的和的程序，（算完一次提示是否继续）</p><p>2)写一个猜数游戏，玩家输入数字，系统提示是大了还是小了，猜对了结束，数字可以是固定的</p><p>3)写一个完善的解二元一次方程的程序（判断是否有根，有实根输出实根，没有输出虚根）</p><p>结尾</p><p>以上的作业涉及了C语言入门的各种知识，请同学们认真对待，不懂就查资料，靠自己的力量完成，注意培养自己的自学能力，不要轻易的问别人。但是有什么疑惑不解的难题时，不要不好意思，一定要找其他的同学或者学长问问。最后，如果我的教程有问题可以私发我，或者在大群指出，都可以的。</p><p>鉴于是假期，作业是不收的，想让我看可以私发我QQ或者QQ邮箱。</p><p>正式的教程在开学后发布，在此之间这篇教程可能会有所修改（更正文字错误，添加新内容）。我相信，半个月的时间，即使对于没有任何基础的同学来讲，看懂这些也是足够了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;由于现在是假期，大家的时间比较好安排。所以大家比较可能会有时间&lt;strong&gt;系统地看书&lt;/strong&gt;或者教程。教程从零到编写出第一个程序，方便大家自行安排学习。本次的作业是引导性的，需要学习了知识才能完成。希望大家在假期劳逸结合，学有所得，玩得开心！&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://uestc-msc.github.io/categories/C-C/"/>
    
    
      <category term="张逸霄" scheme="https://uestc-msc.github.io/tags/%E5%BC%A0%E9%80%B8%E9%9C%84/"/>
    
      <category term="谷亚奇" scheme="https://uestc-msc.github.io/tags/%E8%B0%B7%E4%BA%9A%E5%A5%87/"/>
    
  </entry>
  
  <entry>
    <title>新的主席团成立！！</title>
    <link href="https://uestc-msc.github.io/2017/06/03/%E6%96%B0%E7%9A%84%E4%B8%BB%E5%B8%AD%E5%9B%A2%E6%88%90%E7%AB%8B%EF%BC%81%EF%BC%81/"/>
    <id>https://uestc-msc.github.io/2017/06/03/新的主席团成立！！/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.834Z</updated>
    
    <content type="html"><![CDATA[<p>今年的主席团换届完毕，感谢离开的学长们的付出😭。你们不在，我们还会继续前进！</p><a id="more"></a><p>主席团换届结果：</p><p>主席 张逸霄</p><p>理事 谷亚奇 李沐瑾</p><p>技术部部长 王子和</p><p>运营部部长 任仕贤</p><p>产品部部长 王志伟</p><p>大家在新的一年齐心协力，共创佳绩！</p><p>另外，官网开放了评论功能，大家的评论不会受限了！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年的主席团换届完毕，感谢离开的学长们的付出😭。你们不在，我们还会继续前进！&lt;/p&gt;
    
    </summary>
    
      <category term="管理层公告" scheme="https://uestc-msc.github.io/categories/%E7%AE%A1%E7%90%86%E5%B1%82%E5%85%AC%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>换届了！！！</title>
    <link href="https://uestc-msc.github.io/2017/06/02/%E6%8D%A2%E5%B1%8A%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <id>https://uestc-msc.github.io/2017/06/02/换届了！！！/</id>
    <published>2017-06-01T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.834Z</updated>
    
    <content type="html"><![CDATA[<p>The following is who keep the club running said:</p><p>谁终将声震人间，必长久深自缄默；谁终将点燃闪电，必长久如云漂泊。本周五中午13:00，俱乐部新一年主席团换届将拉开帷幕。</p><a id="more"></a><p>本次换届空缺出来的职位：理事x1 技术部部长x1 产品部部长x1 运营部部长x1（随实际情况可能增多或减少）主席团是俱乐部真正的核心，共同决定俱乐部的发展方向，策划活动；各个部长又有足够多的自主权，每一个部长都是本部门发展的最大BOSS。理事适合于多面手，协助各个部门的事务。各位如想在俱乐部的新一年中，与我们共同策划俱乐部的路途与走向，和其他主席团成员共同工作，此时便是加入的好时候。主席团成员各司其职，又会定期召开会议，共同讨论俱乐部事务。加入主席团并不需要耗费多少精力，同事们也会帮助你发展自己的计划。在承担主席团义务的同时，成员将能优先获得俱乐部总部各种福利（包括夏令营名额，和内推机会），诚邀各位加入！选拔的重要指标是俱乐部成员的投票，用你的热情去征服大家吧！另：如无特殊情况，俱乐部成员需要按时参加现场换届</p><p>The following is who write the page said:</p><p>你们谁还对我们俱乐部有所留恋的，就留下来吧！秋招之后我们就更新了，以我搞事的能力为名义担保，我们俱乐部一定会变得不一样🐳</p><p>ps:一定要来竞选！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The following is who keep the club running said:&lt;/p&gt;
&lt;p&gt;谁终将声震人间，必长久深自缄默；谁终将点燃闪电，必长久如云漂泊。本周五中午13:00，俱乐部新一年主席团换届将拉开帷幕。&lt;/p&gt;
    
    </summary>
    
      <category term="管理层公告" scheme="https://uestc-msc.github.io/categories/%E7%AE%A1%E7%90%86%E5%B1%82%E5%85%AC%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>【Bot Framework完全攻略】2-2.蓝图（Bot Framework项目结构）</title>
    <link href="https://uestc-msc.github.io/2017/04/30/2-2.%E8%93%9D%E5%9B%BE/"/>
    <id>https://uestc-msc.github.io/2017/04/30/2-2.蓝图/</id>
    <published>2017-04-29T18:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.826Z</updated>
    
    <content type="html"><![CDATA[<p>当你导入Bot Framework项目时，你就看到了一大堆东西。这节教程我们就从Bot Framework项目的解决方案管理器出发，来讲讲项目中代码之外的一切东西。</p><a id="more"></a><p>首先你要知道Bot是一个基于ASP.NET的网络应用，它有一个固有格式，不是所有东西都需要做修改的。下面我先列出你能看到的所有东西的用途：</p><ul><li>Connected Services：从Visual Studio直接连接微软的一些服务（我们应该用不到这些高级的东西）</li><li>Properties中的Assembly.cs：项目信息（用不到）</li><li>***引用：右键点击引用可以管理引用和Nuget程序包，Nuget默认开启了你缺什么包就自动下载的功能，但是就像我之前提到的，使用一些功能时需要手动添加引用。</li><li>App_Start中的WebApiConfig.cs：Api配置（用不到）</li><li>***Controllers中的MessagesController.cs</li><li>***Dialogs中的RootDialog.cs</li><li>**default.htm：Bot的首页，已经被我们修改成了与Bot对话的地方</li><li>Global.asax：响应网络应用的应用级和模块级事件（太高级以至于用不到）</li><li>packages.config：文本方式管理应用程序使用的包（你不摸它可以包你没事）</li><li>**Web.config：网络应用的配置信息，比如我们之前就把AppID和AppSecret加了进去，但是之后我们也用不到它了</li></ul><p>所有用到过的东西我都打了“*”，其他的东西基本是不需要你改的（摸坏了后果自负）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你导入Bot Framework项目时，你就看到了一大堆东西。这节教程我们就从Bot Framework项目的解决方案管理器出发，来讲讲项目中代码之外的一切东西。&lt;/p&gt;
    
    </summary>
    
      <category term="Bot Framework" scheme="https://uestc-msc.github.io/categories/Bot-Framework/"/>
    
    
      <category term="谷亚奇" scheme="https://uestc-msc.github.io/tags/%E8%B0%B7%E4%BA%9A%E5%A5%87/"/>
    
  </entry>
  
  <entry>
    <title>【Bot Framework完全攻略】2-2.模具（C#项目结构）</title>
    <link href="https://uestc-msc.github.io/2017/04/30/2-2.%E6%A8%A1%E5%85%B7/"/>
    <id>https://uestc-msc.github.io/2017/04/30/2-2.模具/</id>
    <published>2017-04-29T16:00:00.000Z</published>
    <updated>2019-09-23T21:46:48.826Z</updated>
    
    <content type="html"><![CDATA[<p>在着手准备打造天气娘之前我先讲一讲C#的项目结构。即使你学过编程（C/C++），你要知道C#只是名字和语言风格和他们有些相像而已。我不会费太多话讲他们的区别，我就挑一些关键的，你必须知道的东西。</p><p>首先，打开VS，新建一个C#控制台项目。看看你的解决方案管理器里面都有什么。</p><a id="more"></a><p>不出意外，在默认的解决方案下有一个同名的项目。项目包含依赖项和一个Program.cs</p><p><img src="2-2.%E6%A8%A1%E5%85%B7/s5v1d9a1fv9as8f.png" alt="img"></p><p>其中Program.cs是输出Helloworld的代码。上面的依赖项是做什么的呢？展开！</p><p><img src="2-2.%E6%A8%A1%E5%85%B7/s5v1d9a1fv9as8f-1.png" alt="img"></p><p>好多好多东西。。。你如果只学过C/C++很基础的一部分，根据你的编程经验可能不是很懂。我们对比一下C++/C#的Helloworld程序代码。你只需要关注最上面的两行（1~2行）</p><p>C#</p><p><img src="2-2.%E6%A8%A1%E5%85%B7/s5v1d9a1fv9as8f-2.png" alt="img"></p><p>C++</p><p><img src="2-2.%E6%A8%A1%E5%85%B7/s5v1d9a1fv9as8f-3.png" alt="img"></p><p>这两段程序的using那行都是用来声明使用的namespace（命名空间）的。但是C++上面还有预处理指令#include<iostream> C#的在哪里呢？</iostream></p><p>当然是在依赖项里啊（要不我费那么多话要干嘛。。）</p><p>我不在往下讲更多，讲的这些只是想让你注意一件事。</p><p>你想使用C#自带的库中的功能时，通常只需要加上像using System.xxx;这样的语句。那是因为.NET CORE这个库里面的东西实在是太多了，你在前面也看见了，就像C++里有一个变态的叫bits/std<em>c++</em>.h的头文件一样。</p><p>但是，这个最基本的库并不具有整个计算机World所有的功能。For Example：</p><p>当你想使用C#去查询天气，你需要使用网络请求。这时候你去百度，找到一段代码，贴进来发现有些类是未定义的。比如说有个类叫HttpClient，根据往常的经验，这时候你去msdn或者其他的地方查到了这个类属于System.Net.Http命名空间，然后你在你程序的开头加入了一行using语句，发现提示你这个命名空间是不存在的。</p><p>这时候你要注意了，你犯的错误就像在C++中using namespace std 但是却没有#include<iostream>一样</iostream></p><p>不用我说你可能也知道了，到依赖项/引用（在引用过一些其他的包后这个名字就变成了引用）那里，右键点击引用&gt;添加引用：</p><p><img src="2-2.%E6%A8%A1%E5%85%B7/s5v1d9a1fv9as8f-4.png" alt="img"></p><p>在弹出的包管理器中&gt;程序集&gt;框架 中，找到System.Net.Http并且勾选：</p><p><img src="2-2.%E6%A8%A1%E5%85%B7/s5v1d9a1fv9as8f-5.png" alt="img"></p><p>确认之后发现问题就解决了。</p><p>总结：这篇教程并没有带你做一些实际的东西，只是为了让你了解一下C#项目与C++或者其他语言不一样的地方，便于以后处理一些小问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在着手准备打造天气娘之前我先讲一讲C#的项目结构。即使你学过编程（C/C++），你要知道C#只是名字和语言风格和他们有些相像而已。我不会费太多话讲他们的区别，我就挑一些关键的，你必须知道的东西。&lt;/p&gt;
&lt;p&gt;首先，打开VS，新建一个C#控制台项目。看看你的解决方案管理器里面都有什么。&lt;/p&gt;
    
    </summary>
    
      <category term="Bot Framework" scheme="https://uestc-msc.github.io/categories/Bot-Framework/"/>
    
    
      <category term="谷亚奇" scheme="https://uestc-msc.github.io/tags/%E8%B0%B7%E4%BA%9A%E5%A5%87/"/>
    
  </entry>
  
</feed>
